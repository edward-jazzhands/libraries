{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Libraries By Edward Jazzhands","text":"<p>Welcome to my library hub!  </p> <p>I build Python libraries focused on being easy to use, well-documented, and production-ready. I also manage the Textual Tool Yard organization, a loose affiliation of some prominent Textual library developers.</p>"},{"location":"#libraries-for-textual","title":"Libraries for Textual","text":"<ul> <li> <p> Textual-Window     A Textual widget for a floating, draggable window and included window bar/manager system. Docs \u2192</p> </li> <li> <p> Textual-PyFiglet     ASCII text banners for Textual, powered by PyFiglet. Docs \u2192</p> </li> <li> <p> Textual-Color-O-Matic     A Textual widget for displaying ASCII art with color effects and animations. Docs \u2192</p> </li> <li> <p> Textual-SlideContainer     Sliding container for Textual apps, allowing for smooth transitions. Docs \u2192</p> </li> </ul>"},{"location":"#other-libraries","title":"Other Libraries","text":"<ul> <li> <p> EZPubSub     An ultra simple, modern pub/sub library and blinker alternative for Python. Docs \u2192</p> </li> <li> <p> Rich-PyFiglet     ASCII text banners for Rich, powered by PyFiglet. Docs \u2192</p> </li> </ul>"},{"location":"#about-these-libraries","title":"About These Libraries","text":"<p>All of these libraries are actively maintained and designed to work independently of each other. Check the navigation bar for full documentation for each one.</p>"},{"location":"ezpubsub/","title":"EZPubSub","text":"<p>A tiny, modern alternative to Blinker \u2013 typed, thread-safe, and designed for today\u2019s Python.</p> <p>EZPubSub is a zero-dependency pub/sub library focused on one thing: making event publishing and subscribing easy, safe, and predictable. No async-first complexity, no dynamic runtime magic\u2014just clean, synchronous pub/sub that works anywhere.</p> <p>The core design is inspired by the internal signal system in Textual, refined into a standalone library built for general use.</p>"},{"location":"ezpubsub/#quick-start","title":"Quick Start","text":"<pre><code>from ezpubsub import Signal\n\ndata_signal = Signal[str](\"data_updated\")\n\ndef on_data(data: str) -&gt; None:\n    print(\"Received:\", data)\n\ndata_signal.subscribe(on_data)\ndata_signal.publish(\"Hello World\")\n# Output: Received: Hello World\n</code></pre> <p>That\u2019s it. You create a signal, subscribe to it, and publish events.</p>"},{"location":"ezpubsub/#why-another-pubsub-library","title":"Why Another Pub/Sub Library?","text":"<p>Because pub/sub in Python is either old and untyped or overengineered and async-first.</p> <p>Writing a naive pub/sub system is easy\u2014just keep a list of callbacks and fire them. Writing one that actually works in production is not. You need to handle thread safety, memory management (weak refs for bound methods), error isolation, subscription lifecycles, and type safety. Most libraries get at least one of these wrong.</p> <p>The last great attempt was Blinker\u201415 years ago. It was excellent for its time, but Python has moved on. EZPubSub is what a pub/sub library should look like in 2025: type-safe, thread-safe, ergonomic, and designed for modern Python.</p>"},{"location":"ezpubsub/#features","title":"Features","text":"<ul> <li>Thread-Safe by Default \u2013 Publish and subscribe safely across threads.</li> <li>Strongly Typed with Generics \u2013 <code>Signal[str]</code>, <code>Signal[MyClass]</code>, or even TypedDict/dataclasses for structured events. Pyright/MyPy catches mistakes before runtime.</li> <li>Synchronous First (Async Optional) \u2013 Works in any environment, including mixed sync/async projects.</li> <li>Automatic Memory Management \u2013 Bound methods are weakly referenced and auto-unsubscribed when their objects are deleted.</li> <li>No Runtime Guesswork \u2013 No <code>**kwargs</code>, no stringly-typed namespaces, no dynamic channel lookups.</li> <li>Lightweight &amp; Zero Dependencies \u2013 Only what you need, nothing else.</li> </ul>"},{"location":"ezpubsub/#how-it-compares","title":"How It Compares","text":""},{"location":"ezpubsub/#ezpubsub-vs-blinker","title":"EZPubSub vs Blinker","text":"<p>Blinker is great for simple, single-threaded Flask-style apps. But:</p> Feature EZPubSub Blinker Typing \u2705 Full static typing (<code>Signal[T]</code>) \u274c Untyped (<code>Any</code>) Thread Safety \u2705 Built-in \u274c Single-threaded only Design \u2705 Instance-based, type-safe \u26a0\ufe0f Channel-based (runtime filtering, string keys) Weak Refs \u2705 Automatic \u2705 Automatic <p>If you\u2019re starting a new project in 2025, you deserve type checking and thread safety out of the box.</p>"},{"location":"ezpubsub/#ezpubsub-vs-aiosignal","title":"EZPubSub vs AioSignal","text":"<p><code>aiosignal</code> is excellent for its niche\u2014managing fixed async callbacks inside <code>aiohttp</code>\u2014but unsuitable as a general pub/sub system:</p> Limitation Why It Matters Async-Only Forces you to rewrite sync code or wrap callbacks in event loop tasks. Frozen Subscribers You must <code>freeze()</code> before sending; no dynamic add/remove at runtime. No Thread Safety Assumes a single event loop context. Loose Typing Allows arbitrary <code>**kwargs</code>, undermining type safety. <p><code>aiosignal</code> is great if you\u2019re writing an <code>aiohttp</code> extension. But if you need a general-purpose pub/sub system that works in any context, it's not the greatest fit.</p>"},{"location":"ezpubsub/#why-not-async-first-libraries","title":"Why Not Async-First Libraries?","text":"<p>Pub/sub is just a dispatch mechanism. Whether you await data before publishing is application logic\u2014not the library\u2019s job. Async-first libraries complicate what should be simple: they force you to juggle tasks, event loops, and weird APIs for no real benefit.</p> <p>Synchronous first, with optional async support, is simpler and more predictable. That\u2019s why Blinker, Celery, and PyDispatcher all share this design\u2014and why EZPubSub does too.</p>"},{"location":"ezpubsub/#design-philosophy","title":"Design Philosophy","text":""},{"location":"ezpubsub/#signals-vs-channels","title":"Signals vs Channels","text":"<p>EZPubSub uses one object per signal, instead of Blinker\u2019s \u201cone channel, many signals\u201d model.</p> <p>Blinker (channel-based):</p> <pre><code>user_signal = Signal()  \nuser_signal.connect(login_handler, sender=LoginService)\nuser_signal.send(sender=LoginService, user=user)\n</code></pre> <p>EZPubSub (instance-based):</p> <pre><code>login_signal = Signal[LoginEvent](\"user_login\")\nlogin_signal.subscribe(login_handler)\nlogin_signal.publish(LoginEvent(user=user))\n</code></pre> <p>This matters because:</p> <ul> <li>No filtering \u2013 Each signal already represents one event type.</li> <li>No runtime lookups \u2013 You never hunt down signals by string name.</li> <li>Type safety \u2013 Wrong event types are caught by your IDE/type checker.</li> </ul> <p>Fewer magic strings, fewer runtime bugs, and code that reads like what it does.</p>"},{"location":"ezpubsub/#why-no-kwargs","title":"Why No <code>**kwargs</code>?","text":"<p>Allowing arbitrary keyword arguments is convenient\u2014but it destroys type safety.</p> <pre><code># Bad: fragile, stringly typed\nsignal.publish(user, session_id=\"abc123\", ip=\"1.2.3.4\")\n\n# Good: explicit, type-safe\n@dataclass\nclass UserLoginEvent:\n    user: User\n    session_id: str\n    ip: str\n\nsignal.publish(UserLoginEvent(user, \"abc123\", \"1.2.3.4\"))\n</code></pre> <p>This forces better API design and catches mistakes at compile time instead of runtime. If you need flexible payloads, use TypedDicts, dataclasses, or even a <code>Union</code> of event types.</p>"},{"location":"ezpubsub/#installation","title":"Installation","text":"<pre><code>pip install ezpubsub\n</code></pre> <p>Or with UV:</p> <pre><code>uv add ezpubsub\n</code></pre> <p>Requires Python 3.10+.</p>"},{"location":"ezpubsub/#documentation","title":"Documentation","text":"<p>Full docs: Click here</p>"},{"location":"ezpubsub/#license","title":"License","text":"<p>MIT License. See LICENSE for details.</p>"},{"location":"ezpubsub/#why-this-library-exists","title":"Why This Library Exists","text":"<p>Because the Python ecosystem needed a modern, type-safe, thread-safe pub/sub library that doesn\u2019t suck.</p> <p>EZPubSub is {167} deliberate lines of code that exist for one reason: to make event-driven Python sane again.</p>"},{"location":"ezpubsub/docs/","title":"EZPubSubDocumentation and Guide","text":""},{"location":"ezpubsub/docs/#requirements","title":"Requirements","text":"<ul> <li>Python 3.10 or higher</li> <li>Optional: Enable type checking with Pyright, MyPy, or your checker of choice to get the full benefits of static typing and generics.</li> </ul>"},{"location":"ezpubsub/docs/#installation","title":"Installation","text":"<pre><code>pip install ezpubsub\n</code></pre> <p>Or, with UV:</p> <pre><code>uv add ezpubsub\n</code></pre>"},{"location":"ezpubsub/docs/#quick-start","title":"Quick Start","text":"<p>Create a <code>Signal</code> instance, subscribe to it, and publish data:</p> <pre><code>from ezpubsub import Signal\n\ndata_signal = Signal[str](name=\"data_updated\")\n\ndef my_callback(data: str) -&gt; None:\n    print(\"Received data:\", data)\n\ndata_signal.subscribe(my_callback)\ndata_signal.publish(\"Hello World\")\n# Output: Received data: Hello World\n</code></pre>"},{"location":"ezpubsub/docs/#basic-usage-example","title":"Basic Usage Example","text":"<pre><code>from ezpubsub import Signal\n\nclass DataSender:\n    def __init__(self):\n        # Type hint the signal with the type of data it will send to subscribers:\n        self.data_signal = Signal[str](name=\"data_updated\")\n\n    def fetch_some_data(self) -&gt; None:\n        data = imaginary_work()\n        self.data_signal.publish(data)  # Publish data to all subscribers\n\ndata_sender = DataSender()\n\nclass DataProcessor:\n\n    def subscribe_to_signal(self, data_sender: DataSender) -&gt; None:\n        data_sender.data_signal.subscribe(self.process_data)\n\n    # Callback must take one argument which matches the signal's type.\n    def process_data(self, data: str) -&gt; None:\n        print(f\"Processing: {data}\")\n\ndata_processor = DataProcessor()\ndata_processor.subscribe_to_signal(data_sender)\n\ndata_sender.fetch_some_data()\n\n# If the DataProcessor instance is deleted, it will automatically\n# unsubscribe from the signal.\ndel data_processor\n</code></pre>"},{"location":"ezpubsub/docs/#methods-or-functions","title":"Methods or Functions","text":"<p>Both bound instance methods and functions can be used as callbacks.</p> <ul> <li>Bound methods are weakly referenced and automatically unsubscribed when their instances are deleted (example above in Basic Usage)</li> <li>Functions (or other permanent objects) are strongly referenced and must be manually unsubscribed if no longer needed.</li> </ul> <p>Example using a normal function:</p> <pre><code>def my_callback(data: str) -&gt; None:\n    print(\"Got:\", data)\n\nsender.data_signal.subscribe(my_callback)\nsender.data_signal.unsubscribe(my_callback)\n</code></pre>"},{"location":"ezpubsub/docs/#using-in-threads-thread-safety","title":"Using in Threads / Thread Safety","text":"<p>The library is thread-safe. You can safely publish and subscribe from multiple threads. However, be cautious with the data you pass to subscribers, as they will run in the thread that calls publish.</p> <p>Key considerations:</p> <ul> <li>Subscribers execute synchronously in the publishing thread</li> <li>If a subscriber blocks or takes a long time, it will delay other subscribers and the publisher</li> <li>Mutable data passed to subscribers should be thread-safe or immutable</li> <li>Consider using copy.deepcopy() for complex mutable objects if subscribers might modify them</li> </ul> <p>Ultra simple threading example:</p> <pre><code># Simple thread safety example\nsignal = Signal[str]()\nsignal.subscribe(lambda msg: print(f\"Received: {msg}\"))\n\n# Safe to call from any thread\nthreading.Thread(target=lambda: signal.publish(\"Hello from thread\")).start()\n</code></pre> <p>More thorough threading example:</p> <pre><code>import threading\nimport time\nfrom ezpubsub import Signal\n\n# Create a signal that will be shared across threads\nmessage_signal = Signal[str](name=\"cross_thread_messages\")\n\ndef worker_subscriber(worker_id: int):\n    def handle_message(data: str):\n        print(f\"Worker {worker_id} received: {data}\")\n\n    message_signal.subscribe(handle_message)\n    # Keep thread alive to receive messages\n    time.sleep(2)\n\n# Start subscriber threads\nthreads = []\nfor i in range(3):\n    thread = threading.Thread(target=worker_subscriber, args=(i,))\n    thread.start()\n    threads.append(thread)\n\n# Give threads time to subscribe\ntime.sleep(0.1)\n\n# Publish from main thread\nmessage_signal.publish(\"Hello from main thread!\")\nmessage_signal.publish(\"Another message!\")\n\n# Wait for threads to complete\nfor thread in threads:\n    thread.join()\n</code></pre> <p>Some examples of best practices for thread safety:</p> <pre><code>import copy\nfrom ezpubsub import Signal\n\n# For mutable data, consider copying to avoid race conditions\nuser_signal = Signal[dict](name=\"user_updates\")\n\ndef safe_publish(user_data: dict):\n    # Deep copy to prevent concurrent modification issues\n    user_signal.publish(copy.deepcopy(user_data))\n\n# Or use immutable data types like namedtuples or dataclasses with frozen=True\nfrom dataclasses import dataclass\n\n@dataclass(frozen=True)\nclass UserEvent:\n    user_id: int\n    action: str\n    timestamp: float\n\nuser_events = Signal[UserEvent](name=\"user_events\")\n# UserEvent is immutable, so safe to pass between threads\n</code></pre>"},{"location":"ezpubsub/docs/#global-signal-bridging-frameworks","title":"Global Signal / Bridging Frameworks","text":"<pre><code># Useful when you have multiple systems that need to communicate\nfrom ezpubsub import Signal\n\n# Global signal that both systems can use\nsystem_events = Signal[dict](name=\"cross_system\")\n\n# Flask app publishes events\n@app.route('/trigger')\ndef trigger_event():\n    system_events.publish({\"event\": \"flask_trigger\", \"data\": \"hello\"})\n    return \"triggered\"\n\n# Separate background service subscribes\nclass BackgroundService:\n    def __init__(self):\n        system_events.subscribe(self.handle_system_event)\n\n    def handle_system_event(self, event_data: dict):\n        print(f\"Background service received: {event_data}\")\n\n# Now Flask and your background service can communicate\n# without tight coupling\n</code></pre>"},{"location":"ezpubsub/docs/#integrating-with-async-code","title":"Integrating with Async Code","text":"<p>ezpubsub is synchronous at its core. You control when and how to schedule async work, which keeps the library predictable and compatible with any async framework:</p> <pre><code>import asyncio      # if you're using asyncio directly\nfrom ezpubsub import Signal\n\nloop = asyncio.get_event_loop()\ndata_signal = Signal[str]()\n\nasync def async_process(data: str):\n    await asyncio.sleep(0.1)\n    print(\"Async processed:\", data)\n\ndef sync_callback(data: str):\n    loop.create_task(async_process(data))\n\ndata_signal.subscribe(sync_callback)\ndata_signal.publish(\"Hello World\")\nawait asyncio.sleep(0.2)\n</code></pre> <p>This keeps the library simple and leaves control in your hands. Async helper wrappers may possibly be added in the future if there is high enough demand for them. But I personally do not think there's any real benefit. You control when the publisher emits data. If you need your publisher to await some IO, you can do that before calling <code>publish</code>. If you need to schedule the subscriber to run later, you can do that in the callback itself. Here synchronous code is flexible and does not force you into any specific async patterns.</p>"},{"location":"ezpubsub/docs/#using-typed-objects-for-signal-types","title":"Using Typed Objects for Signal Types","text":"<p>One of the coolest benefits of modern Python type hinting is the ability to create \"Typed Objects\" that can be used as signal types. This allows you to define a class that represents the data your signal will carry, and then use that class as the type parameter for your Signal.</p> <pre><code>from dataclasses import dataclass\nfrom typing import Optional\nfrom ezpubsub import Signal\n\n@dataclass\nclass UserRegistered:\n    user_id: int\n    email: str\n    username: str\n    referral_code: Optional[str] = None\n\n@dataclass \nclass OrderPlaced:\n    order_id: str\n    user_id: int\n    total_amount: float\n    items: list[str]\n\n# Create signals with specific typed objects\nuser_events = Signal[UserRegistered](name=\"user_registered\")\norder_events = Signal[OrderPlaced](name=\"order_placed\")\n\n# Type-safe subscribers - your IDE and type checker will catch mistakes!\ndef send_welcome_email(event: UserRegistered) -&gt; None:\n    print(f\"Sending welcome email to {event.email}\")\n    # Your IDE knows 'event' has .email, .username, etc.\n    # Type checker will catch if you try to access .nonexistent_field\n\ndef process_order(event: OrderPlaced) -&gt; None:\n    print(f\"Processing order {event.order_id} for ${event.total_amount}\")\n    # Your IDE knows 'event' has .order_id, .total_amount, etc.\n\nuser_events.subscribe(send_welcome_email)\norder_events.subscribe(process_order)\n\n# Publishing with type safety\nuser_events.publish(UserRegistered(\n    user_id=123,\n    email=\"user@example.com\", \n    username=\"newuser\",\n    referral_code=\"FRIEND123\"\n))\n\n# This would be caught by type checker:\n# user_events.publish(\"just a string\")  # Type error!\n# user_events.publish(OrderPlaced(...))  # Type error!\n\n# Benefits:\n# 1. IDE autocomplete for event data fields\n# 2. Compile-time type checking catches bugs early  \n# 3. Self-documenting - signal type tells you exactly what data to expect\n# 4. Refactoring safety - rename a field and find all usages automatically\n# 5. Easy to evolve - add new fields with defaults without breaking existing code\n</code></pre> <p>Pro tip: Use dataclasses with <code>frozen=True</code> for immutable events that are safe to pass between threads (See Using in Threads / Thread Safety)</p>"},{"location":"ezpubsub/docs/#overriding-logging-and-error-handling","title":"Overriding Logging and Error Handling","text":"<p>You can override the <code>log</code> and <code>on_error</code> methods in your <code>Signal</code> subclass to customize logging and error handling behavior.</p> <p>By default, <code>on_error</code> just logs the exception using the <code>log</code> method, and the <code>log</code> method uses Python's built-in logging module. You can change this to raise exceptions, use a different logger, or handle errors in any way you prefer.</p> <pre><code>from ezpubsub import Signal\nfrom loguru import logger as loguru_logger\n\n# Custom logger setup\ncustom_logger = logging.getLogger(\"my_app.signals\")\ncustom_logger.setLevel(logging.DEBUG)\n\nclass CustomSignal(Signal[str]):\n    def log(self, message: str) -&gt; None:\n        # Use your own logger instead of the default\n        custom_logger.debug(f\"[SIGNAL:{self._name}] {message}\")\n\n    def on_error(self, subscriber, callback, error: Exception) -&gt; None:\n\n        # Potential 1: Swap in standard logger with a different one\n        loguru_logger.info(f\"Callback error from {subscriber}: {error}\")\n\n        # Potential 2: Re-raise the exception (stops execution)\n        # Catch this by wrapping the publish call in a try-except block.\n        raise error\n\n        # Potential 3: Use your own error handling logic\n        sentry.capture_exception(error)\n\n# Usage\nsignal = CustomSignal(name=\"my_signal\")\nsignal.toggle_logging(True)  # Enable logging to see the custom behavior\n\ndef problematic_callback(data: str):\n    raise ValueError(\"Something went wrong!\")\n\nsignal.subscribe(problematic_callback)\n\n# If you've raised the error you can now catch it when you call publish\ntry:\n    signal.publish(\"test\")  # Will trigger custom error handling\nexcept Exception as e:\n    print(f\"Caught an error during publish: {e}\")\n</code></pre>"},{"location":"ezpubsub/docs/#memory-management","title":"Memory Management","text":"<p>ezpubsub will handle the memory management differently depending on whether the subscriber is a bound method or a normal function:</p> <ul> <li>Bound methods are weakly referenced and automatically unsubscribed when their instances are deleted. This means you don't have to worry about memory leaks from subscribers that are no longer needed. If the class instance is deleted, the subscriber will be automatically unsubscribed from the signal.</li> <li>Functions (or other permanent objects) are strongly referenced and must be manually unsubscribed if no longer needed. This is useful for long-lived subscribers that you want to keep around, but you need to remember to unsubscribe them when they are no longer needed to avoid memory leaks.</li> </ul> <p>Bound methods:</p> <pre><code>class DataProcessor:\n    def process(self, data: str):\n        print(f\"Processing: {data}\")\n\nsignal = Signal[str]()\nprocessor = DataProcessor()\nsignal.subscribe(processor.process)  # Weakly referenced\n\nprint(f\"Subscribers: {signal.subscriber_count}\")  # 1\ndel processor  # Object is deleted\nprint(f\"Subscribers: {signal.subscriber_count}\")  # 0 (automatically cleaned up)\n</code></pre> <p>Functions:</p> <pre><code>def process_data(data: str):\n    print(f\"Processing: {data}\")\n\nsignal = Signal[str]()\nsignal.subscribe(process_data)  # Strongly referenced\n\nprint(f\"Subscribers: {signal.subscriber_count}\")  # 1\ndel process_data  # This doesn't remove it from the signal!\nprint(f\"Subscribers: {signal.subscriber_count}\")  # Still 1\n\n# You must manually unsubscribe functions:\nsignal.unsubscribe(process_data)\n</code></pre> <p>Why This Design?</p> <ul> <li>Instance methods are usually tied to object lifecycles - when the object is gone, you probably don't want the callbacks anymore</li> <li>Functions are often module-level and meant to persist - they need explicit management</li> <li>This prevents memory leaks while keeping the API simple</li> </ul>"},{"location":"ezpubsub/docs/#api-reference","title":"API Reference","text":"<p>You can find the full API reference on the reference page.</p>"},{"location":"ezpubsub/reference/","title":"ezpubsub reference","text":"<p>               Bases: <code>Generic[SignalT]</code></p> <p>A simple synchronous and asynchronous pub/sub signal.</p>"},{"location":"ezpubsub/reference/#ezpubsub.signal.Signal.error_raising","title":"<code>error_raising</code>  <code>property</code>","text":"<p>Check if error raising is enabled.</p>"},{"location":"ezpubsub/reference/#ezpubsub.signal.Signal.frozen","title":"<code>frozen</code>  <code>property</code>","text":"<p>Check if the signal is frozen.</p>"},{"location":"ezpubsub/reference/#ezpubsub.signal.Signal.logging_enabled","title":"<code>logging_enabled</code>  <code>property</code>","text":"<p>Check if logging is enabled.</p>"},{"location":"ezpubsub/reference/#ezpubsub.signal.Signal.require_freeze","title":"<code>require_freeze</code>  <code>property</code>","text":"<p>Check if freeze is required before publishing.</p>"},{"location":"ezpubsub/reference/#ezpubsub.signal.Signal.subscriber_count","title":"<code>subscriber_count</code>  <code>property</code>","text":"<p>Return the total number of subscribers (both weak and strong).</p>"},{"location":"ezpubsub/reference/#ezpubsub.signal.Signal.__call__","title":"<code>__call__(func)</code>","text":"<p>Decorator interface for subscribing functions.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Union[Callable[[SignalT], None], Callable[[SignalT], Awaitable[Any]]]</code> <p>The function to subscribe.</p> required <p>Returns:     The same function (for decorator chaining).</p> <p>Usage example: ``` @signal def my_handler(data):     print(f\"Received data: {data}\")</p>"},{"location":"ezpubsub/reference/#ezpubsub.signal.Signal.__len__","title":"<code>__len__()</code>","text":"<p>Return self.subscriber_count using len() for convenience.</p>"},{"location":"ezpubsub/reference/#ezpubsub.signal.Signal.aon_error","title":"<code>aon_error(subscriber, callback, error)</code>  <code>async</code>","text":"<p>Async version of on_error. Override this to handle async errors differently.</p> <p>Parameters:</p> Name Type Description Default <code>subscriber</code> <code>Any</code> <p>The subscriber that raised the error.</p> required <code>callback</code> <code>Union[Callable[[SignalT], None], Callable[[SignalT], Awaitable[Any]]]</code> <p>The callback that raised the error.</p> required <code>error</code> <code>Exception</code> <p>The exception that was raised.</p> required"},{"location":"ezpubsub/reference/#ezpubsub.signal.Signal.apublish","title":"<code>apublish(data)</code>  <code>async</code>","text":"<p>Asynchronously publish data to all subscribers (both sync and async).</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>SignalT</code> <p>The data to send to subscribers.</p> required <p>Raises:     SignalError: If signal requires freeze and is not frozen.     (Optional) Exception: If a subscriber's callback raises an exception, and <code>error_raising</code>     is True, it will be raised after calling <code>aon_error</code>.</p>"},{"location":"ezpubsub/reference/#ezpubsub.signal.Signal.clear","title":"<code>clear()</code>","text":"<p>Clear all subscribers.</p>"},{"location":"ezpubsub/reference/#ezpubsub.signal.Signal.freeze","title":"<code>freeze()</code>","text":"<p>Freeze the signal to prevent new subscriptions.</p>"},{"location":"ezpubsub/reference/#ezpubsub.signal.Signal.log","title":"<code>log(message)</code>","text":"<p>Override this to customize logging behavior. This will also override the <code>logging_enabled</code> flag.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message to log.</p> required"},{"location":"ezpubsub/reference/#ezpubsub.signal.Signal.on_error","title":"<code>on_error(subscriber, callback, error)</code>","text":"<p>Override this to handle errors differently. This will also override the <code>error_raising</code> flag.</p> <p>Parameters:</p> Name Type Description Default <code>subscriber</code> <code>Any</code> <p>The subscriber that raised the error.</p> required <code>callback</code> <code>Union[Callable[[SignalT], None], Callable[[SignalT], Awaitable[Any]]]</code> <p>The callback that raised the error.</p> required <code>error</code> <code>Exception</code> <p>The exception that was raised.</p> required"},{"location":"ezpubsub/reference/#ezpubsub.signal.Signal.publish","title":"<code>publish(data)</code>","text":"<p>Publish data to all subscribers (sync only). If any subscriber raises an exception, it will be caught and passed to the <code>on_error</code> method (which just logs by default, but can be overridden for custom error handling).</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>SignalT</code> <p>The data to send to subscribers.</p> required <p>Raises:     (Optional) Exception: If a subscriber's callback raises an exception, and <code>error_raising</code>     is True, it will be raised after calling <code>on_error</code>.</p>"},{"location":"ezpubsub/reference/#ezpubsub.signal.Signal.subscribe","title":"<code>subscribe(callback)</code>","text":"<p>Subscribe to the signal with a callback (sync or async).</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Union[Callable[[SignalT], None], Callable[[SignalT], Awaitable[Any]]]</code> <p>A callable that accepts a single argument of type SignalT.</p> required <p>Raises:     SignalError: If the callback is not callable or signal is frozen.</p>"},{"location":"ezpubsub/reference/#ezpubsub.signal.Signal.toggle_error_raising","title":"<code>toggle_error_raising(enabled=True)</code>","text":"<p>Toggle whether to raise exceptions in subscriber callbacks which are passed to <code>on_error</code>.</p> <p>Note that you can also override the <code>on_error</code> method to customize error handling, which would also override this flag unless you chose to incorporate it.</p>"},{"location":"ezpubsub/reference/#ezpubsub.signal.Signal.toggle_logging","title":"<code>toggle_logging(enabled=True)</code>","text":"<p>Toggle logging for this signal.</p> <p>Note that you can also override the <code>log</code> method to customize logging behavior, which would also override this flag unless you chose to incorporate it.</p>"},{"location":"ezpubsub/reference/#ezpubsub.signal.Signal.unsubscribe","title":"<code>unsubscribe(subscriber)</code>","text":"<p>Unsubscribe a subscriber from the signal.</p> <p>Parameters:</p> Name Type Description Default <code>subscriber</code> <code>Any</code> <p>The subscriber to remove, which can be a class instance or a function.</p> required <p>Returns:     bool: True if the subscriber was removed, False if it was not found.</p>"},{"location":"rich-pyfiglet/","title":"Introduction","text":""},{"location":"rich-pyfiglet/#rich-pyfiglet","title":"Rich-Pyfiglet","text":"<p>Rich-PyFiglet is an implementation of PyFiglet for Rich.</p> <p>It provides a RichFiglet class that is fully compatible with the Rich API and can be dropped into your Rich scripts.</p> <p>This library is related to Textual-Pyfiglet.</p>"},{"location":"rich-pyfiglet/#features","title":"Features","text":"<ul> <li>Usage in your Rich scripts can be a single line of code with default settings.</li> <li>Color system built on Rich can take common formats such as hex code and RGB, as well as a big list of named colors.</li> <li>Banner will automatically adjust to the terminal width and word-wrap the text.</li> <li>Automatically create gradients between colors vertically or horizontally.</li> <li>Comes with 4 animation modes built in (up, down, smooth-strobe, fast-strobe).</li> <li>Pass in a list of colors for multicolored gradients and animations.</li> <li>Manually tweak the gradient quality as well as the animation FPS in order to customize the banner the way you want it.</li> <li>Add borders around the banner - The RichFiglet takes border settings as arguments, which allows it to properly account for the border and padding when calculating its available space (without doing this, some terminal sizes would mess up the render).</li> <li>Included CLI mode for quick testing.</li> <li>The fonts are type-hinted to give you auto-completion in your code editor, eliminating the need to manually check what fonts are available.</li> </ul>"},{"location":"rich-pyfiglet/#try-out-the-cli","title":"Try out the CLI","text":"<p>If you have uv or pipx, you can immediately try the included CLI:</p> <pre><code>uvx rich-pyfiglet \"Rich is awesome\" --colors blue:green\n</code></pre> <pre><code>pipx rich-pyfiglet \"Rich is awesome\" --colors blue:green\n</code></pre>"},{"location":"rich-pyfiglet/#documentation","title":"Documentation","text":""},{"location":"rich-pyfiglet/#click-here-for-documentation","title":"Click here for documentation","text":""},{"location":"rich-pyfiglet/#questions-issues-suggestions","title":"Questions, Issues, Suggestions?","text":"<p>Use the issues section for bugs or problems, and post ideas or feature requests on the TTY group discussion board.</p>"},{"location":"rich-pyfiglet/#thanks-and-copyright","title":"Thanks and Copyright","text":"<p>Both Rich-Pyfiglet and the original PyFiglet are under MIT License. See LICENSE file.</p> <p>FIGlet fonts have existed for a long time, and many people have contributed over the years.</p> <p>Original creators of FIGlet: https://www.figlet.org</p> <p>The PyFiglet creators: https://github.com/pwaller/pyfiglet</p> <p>Rich: https://github.com/Textualize/rich</p> <p>And finally, thanks to the many hundreds of people that contributed to the fonts collection.</p>"},{"location":"rich-pyfiglet/docs/","title":"Rich-PyFigletDocumentation and Guide","text":""},{"location":"rich-pyfiglet/docs/#requirements","title":"Requirements","text":"<ul> <li>Python &gt;= 3.9</li> </ul> <p>if you are using it inside of a Rich application, you will also need:</p> <ul> <li>Rich &gt;= 12.6.0</li> </ul>"},{"location":"rich-pyfiglet/docs/#installation","title":"Installation","text":"<pre><code>pip install rich-pyfiglet\n</code></pre> <p>Or using uv:</p> <pre><code>uv add rich-pyfiglet\n</code></pre>"},{"location":"rich-pyfiglet/docs/#cli-mode","title":"CLI mode","text":"<p>You can instantly try out Rich-PyFiglet with the included CLI using uv:</p> <pre><code>uvx rich-pyfiglet \"Rich is awesome\" --colors green3:purple -a gradient_down\n</code></pre> <p>or using pipx:</p> <pre><code>pipx run rich-pyfiglet \"Rich is awesome\" --colors blue1:magenta3 -h\n</code></pre>"},{"location":"rich-pyfiglet/docs/#getting-started","title":"Getting Started","text":"<p>Import into your project with:</p> <pre><code>from rich_pyfiglet import RichFiglet\n</code></pre> <p>Example of very basic usage:</p> <pre><code>from rich.console import Console\nfrom rich_pyfiglet import RichFiglet\nconsole = Console()\n\nrich_fig = RichFiglet(\n    \"Your Text Here\",\n    font=\"ansi_shadow\",\n    colors=[\"#ff0000\", \"bright_blue\"],\n)\nconsole.print(rich_fig)\n</code></pre>"},{"location":"rich-pyfiglet/docs/#passing-in-multiple-colors-and-set-direction-to-horizontal","title":"Passing in multiple colors and set direction to horizontal","text":"<pre><code>rich_fig = RichFiglet(\n    \"Rich - PyFiglet\",\n    font=\"ansi_shadow\",\n    colors=[\"#ff0000\", \"bright_blue\", \"yellow\", \"green3\"],\n    horizontal=True,\n)\nconsole.print(rich_fig)\n</code></pre>"},{"location":"rich-pyfiglet/docs/#using-animations","title":"Using animations","text":"<p>The 4 types of animations are:</p> <ul> <li><code>gradient_up</code>: The Color gradient will flow vertically across the banner upwards.</li> <li><code>gradient_down</code>: The Color gradient will flow vertically across the banner downwards.</li> <li><code>smooth_strobe</code>: The entire banner will smoothly transition between colors</li> <li><code>fast_strobe</code>: The entire banner will hard switch to the next color.</li> </ul> <p>If you pass in multiple colors, they will all be used in the animation. The animation will cycle through all colors you passed in and then loop.</p> <pre><code>rich_fig = RichFiglet(\n    \"Rich - PyFiglet\",\n    font=\"slant\",\n    colors=[\"#ff0000\", \"bright_blue\", \"yellow\", \"green3\"],\n    animation=\"smooth_strobe\",\n)\nconsole.print(rich_fig)\n</code></pre>"},{"location":"rich-pyfiglet/docs/#advanced-tweaking","title":"Advanced tweaking","text":"<p>For more fine-grained control, you can adjust the gradient quality and the animation FPS. FPS can be a float.</p> <pre><code>rich_fig = RichFiglet(\n    \"Rich - PyFiglet\",\n    font=\"rounded\",\n    colors=[\"#ff0000\", \"bright_blue\", \"yellow\", \"green3\"],\n    animation=\"smooth_strobe\",\n    quality=10,\n    fps=1.8,\n)\nconsole.print(rich_fig)\n</code></pre>"},{"location":"rich-pyfiglet/docs/#included-border-arguments","title":"Included border arguments","text":"<p>The RichFiglet takes arguments for border settings. This is completely necessary in order to ensure that it renders properly inside of borders. You might wonder, why not simply take the rendered figlet and put it inside a Rich Panel object after its been rendered? Well, this is prone to some problems.</p> <p>The first is that the RichFiglet gets the terminal width and calculates how much space it has to render. Adding a border and padding after that throws off the calculation, and can mess up the render if your terminal just happens to be at the right size. The second issue is that the animations cannot be placed inside of a Panel object to place a border around them. It will cause the animation to stop working.</p> <p>The RichFiglet solves both of these problems by rendering a border itself. Pass in your desired border settings as arguments in the constructor, and the RichFiglet will properly account for the space taken up by the border and padding to ensure it always renders properly in the available space as well as add a border around any animations you choose.</p> <pre><code>rich_fig = RichFiglet(\n    \"Rich - PyFiglet\",\n    font=\"rounded\",\n    colors=[\"#ff0000\", \"magenta1\"],\n    border=\"ROUNDED\",\n    border_color=\"ff0000\",\n    border_padding = (1, 2),\n)\nconsole.print(rich_fig)\n</code></pre>"},{"location":"rich-pyfiglet/docs/#full-example","title":"Full example","text":"<p>Here is an example of a short script demonstrating almost all argument in the constructor:</p> <pre><code>from rich.console import Console\nfrom rich_pyfiglet import RichFiglet\nconsole = Console()\n\nrich_fig = RichFiglet(\n    \"Your Banner Here\",\n    font = \"modular\",\n    width = 80,   # Bypass the auto-detection and set size manually\n    colors = [\"#ff0000\", \"magenta1\", \"blue3\"],\n    horizontal = True   # This will be ignored because animation is set\n    animation = \"fast_strobe\",\n    fps = 0.5,\n    remove_blank_lines = True,\n    border = \"ROUNDED\",\n    border_padding = (1, 2),\n    border_color = \"#ff0000\",\n    dev_mode = True,\n):\nconsole.print(rich_fig)\nconsole.print(\"The rest of your Rich script\")\n</code></pre>"},{"location":"rich-pyfiglet/docs/#api-reference","title":"API Reference","text":"<p>You can find the full API reference on the reference page.</p>"},{"location":"rich-pyfiglet/reference/","title":"RichFiglet reference","text":"<p>The RichFiglet class is designed to be fully automatic - the only method you need to use is the constructor. Its not dynamic and cannot be modified after the fact - if you want to change the settings, you must create a new RichFiglet object.</p> <p>There are 3 internal utility methods that are exposed for convenience. There's no reason you should need to use them, but they are available if you want to.</p>"},{"location":"rich-pyfiglet/reference/#rich_pyfiglet.rich_figlet.RichFiglet.__init__","title":"<code>__init__(text, font='standard', width=None, colors=None, horizontal=False, quality=None, animation=None, fps=None, remove_blank_lines=False, border=None, border_padding=(1, 2), border_color=None, dev_mode=False)</code>","text":"<p>Create a RichFiglet object.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to render.</p> required <code>font</code> <code>ALL_FONTS</code> <p>The font to use. Defaults to 'standard'.</p> <code>'standard'</code> <code>width</code> <code>int | None</code> <p>The width of the rendered text. If None, will use the terminal width.</p> <code>None</code> <code>colors</code> <code>list[str] | None</code> <p>A list of colors to use for gradients or animations. Each color can be a name, hex code, or RGB triplet. If None, no gradient or animation will be applied. For available named colors, see: https://rich.readthedocs.io/en/stable/appendix/colors.html</p> <code>None</code> <code>horizontal</code> <code>bool</code> <p>Make the gradient render horizontally . This will be ignored if <code>animate</code> is True.</p> <code>False</code> <code>quality</code> <code>int | None</code> <p>The number of steps to blend between two colors. Defaults to None, which enables auto mode. Auto mode sets the quality based on the width or height of the rendered banner. One exception: if <code>animate</code> is True and <code>animation_type</code> is 'smooth_strobe', auto mode will default to 10 steps per gradient.</p> <code>None</code> <code>animation</code> <code>ANIMATION_TYPE | None</code> <ul> <li>'gradient_up': The Color gradient will flow vertically across the banner upwards.</li> <li>'gradient_down': The Color gradient will flow vertically across the banner downwards.</li> <li>'smooth_strobe': The entire banner will smoothly transition between colors</li> <li>'fast_strobe': The entire banner will hard switch to the next color. Recommended to lower the FPS to avoid giving people seizures.</li> </ul> <code>None</code> <code>fps</code> <code>float | None</code> <p>Frames per second for the animation. This is a float so that you can set it to values such as 0.5 if you desire.</p> <code>None</code> <code>remove_blank_lines</code> <code>bool</code> <p>When True, all blank lines from the inside of the rendered ASCII art will be removed. Some fonts have gaps between the lines- this will remove them and compress the banner down to the minimum size.</p> <code>False</code> <code>border</code> <code>BOX_STYLES | None</code> <p>The box style to use for the border. Can be any of the box styles from Rich. Note that border is an argument because it is necessary for the RichFiglet to take the border and padding into account when rendering. It is recommended to use the border argument in the constructor, rather than adding a border afterwards.</p> <code>None</code> <code>border_padding</code> <code>tuple[int, int]</code> <p>The padding to use for the border. Defaults to (1, 2) which is (top/bottom, left/right).</p> <code>(1, 2)</code> <code>border_color</code> <code>str | None</code> <p>The color of the border. Can be a name, hex code, or RGB triplet.</p> <code>None</code> <code>dev_mode</code> <code>bool</code> <p>When True, will print debug information to the console.</p> <code>False</code>"},{"location":"rich-pyfiglet/reference/#rich_pyfiglet.rich_figlet.RichFiglet.get_terminal_width","title":"<code>get_terminal_width()</code>","text":"<p>Get the terminal size.</p> <p>Returns:</p> Type Description <code>int | None</code> <p>The width of the terminal in characters, or None if it cannot be determined.</p>"},{"location":"rich-pyfiglet/reference/#rich_pyfiglet.rich_figlet.RichFiglet.make_gradient","title":"<code>make_gradient(color1, color2, steps)</code>","text":"<p>Generate a smooth gradient between two colors.</p> <p>Parameters:</p> Name Type Description Default <code>color1</code> <code>Color</code> <p>Starting color (can be name, hex, rgb)</p> required <code>color2</code> <code>Color</code> <p>Ending color (can be name, hex, rgb)</p> required <code>steps</code> <code>int</code> <p>Number of colors in the gradient</p> required <p>Returns:</p> Type Description <code>list[Color]</code> <p>A list of Rich Color objects representing the gradient.</p>"},{"location":"rich-pyfiglet/reference/#rich_pyfiglet.rich_figlet.RichFiglet.parse_color","title":"<code>parse_color(color)</code>","text":"<p>Parse a color string into a Color object.</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>str</code> <p>The color string to parse. Can be a name, hex code, or RGB triplet.</p> required <p>Returns:</p> Type Description <code>Color</code> <p>A Rich Color object representing the parsed color.</p>"},{"location":"textual-coloromatic/","title":"Introduction","text":""},{"location":"textual-coloromatic/#textual-color-o-matic","title":"Textual-Color-O-Matic","text":"<p>Textual-Color-O-Matic is a Textual library for color animations and tiling effects.</p> <p>It is designed to make it easy to animate strings with cool color effects, as well as set background patterns that can function as wallpaper or backdrops for widgets.</p>"},{"location":"textual-coloromatic/#features","title":"Features","text":"<ul> <li>Color system built on Textual's color system. Thus, it can display any color in the truecolor/16-bit spectrum, and can take common formats such as hex code and RGB, or just a huge variety of named colors.</li> <li>Make a gradient automatically between any two colors, or through any number of colors.</li> <li>Animation system that's simple to use. Just make your gradient and toggle it on/off. It can also be started or stopped in real-time.</li> <li>Comes with 3 different animation modes - \"gradient\", \"smooth_strobe\", and \"fast_strobe\".</li> <li>Comes with 18 built-in patterns and a pattern constructor argument for easy setting.</li> <li>Has a <code>repeat</code> constructor argument for creating your own patterns or tiling any art.</li> <li>Fully reactive - update the loaded ASCII art change patterns in real-time. Will resize automatically when width or height is set to auto.</li> <li>Animation settings have a variety of variables to modify, including horizontal, reverse, FPS, and quality.</li> <li>Included demo app to showcase the features.</li> </ul>"},{"location":"textual-coloromatic/#demo-app","title":"Demo App","text":"<p>If you have uv or pipx, you can immediately try the demo app:</p> <pre><code>uvx textual-coloromatic\n</code></pre> <pre><code>pipx run textual-coloromatic\n</code></pre>"},{"location":"textual-coloromatic/#documentation","title":"Documentation","text":""},{"location":"textual-coloromatic/#click-here-for-documentation","title":"Click here for documentation","text":""},{"location":"textual-coloromatic/#video","title":"Video","text":"Your browser does not support the video tag."},{"location":"textual-coloromatic/#questions-issues-suggestions","title":"Questions, Issues, Suggestions?","text":"<p>Use the issues section for bugs or problems, and post ideas or feature requests on the TTY group discussion board.</p>"},{"location":"textual-coloromatic/docs/","title":"Textual-Color-O-MaticDocumentation and Guide","text":""},{"location":"textual-coloromatic/docs/#installation","title":"Installation","text":"<pre><code>pip install textual-coloromatic\n</code></pre> <p>Or using uv:</p> <pre><code>uv add textual-coloromatic\n</code></pre>"},{"location":"textual-coloromatic/docs/#demo-app","title":"Demo app","text":"<p>You can instantly try out the demo app using uv or pipx:</p> <pre><code>uvx textual-coloromatic\n</code></pre> <pre><code>pipx run textual-coloromatic\n</code></pre> <p>Or if you have it downloaded into your python environment, run it using the entry script:</p> <pre><code>textual-coloromatic\n</code></pre> <p>For uv users, after adding it to your environment:</p> <pre><code>uv run textual-coloromatic\n</code></pre>"},{"location":"textual-coloromatic/docs/#concept","title":"Concept","text":"<p>The Coloromatic is a Textual widget that allows you to create and display colorful patterns, gradients, and ASCII art. It supports a variety of built-in patterns, custom string art, and color gradients. The Coloromatic can be animated in different ways, such as smooth transitions between colors or fast strobe effects.</p> <p>It comes built-in with a variety of features, including:</p> <ul> <li>18 built-in patterns that can be used to create colorful backgrounds or art.</li> <li>Support for custom string art, which can be entered directly or loaded from external files.</li> <li>A variety of color options, including named colors, hexadecimal colors, RGB, and HSL colors.</li> <li>Animation options, including smooth transitions between colors, fast strobe effects, and gradient animations.</li> <li>Real-time updates to the art, pattern, and colors.</li> </ul> <p>See the Github repo to watch the demo video, or try the demo app using the instructions above.</p>"},{"location":"textual-coloromatic/docs/#getting-started","title":"Getting Started","text":"<p>Import into your project with:</p> <pre><code>from textual_coloromatic import Coloromatic\n</code></pre> <p>The Coloromatic works out of the box with default settings. Set your desired size in Textual CSS as you normally would with a Textual widget.</p> <pre><code>from textual.app import App, ComposeResult\nfrom textual_coloromatic import Coloromatic\n\nclass MyApp(App):\n    CSS = \"Coloromatic { width: 1fr; height: 10; }\"\n\n    def compose(self) -&gt; ComposeResult:\n        yield Coloromatic(pattern=\"weave\", colors=[\"red\", \"blue\"])\n</code></pre> <p>Note that the width and height will be <code>auto</code> by default. This is probably what you want if displaying some kind of custom art or string, but not for patterns. When using patterns you will need to explicitly set your desired size. The above example will make a banner with width of 1fr and height of 10.</p>"},{"location":"textual-coloromatic/docs/#acting-as-container","title":"Acting as Container","text":"<p>A common use case will be to mount other widgets inside of the Coloromatic. This will allow you to use the Coloromatic as a background generator in a container. Mount your child widgets into the Coloromatic as you normally would:</p> <pre><code>class MyApp(App):\n    CSS = \"\"\"\n    Coloromatic { width: 1fr; height: 10; align: center middle; } \n    .banner { width: auto; border: tall $panel; padding: 0 1; }\n    \"\"\"\n\n    def compose(self) -&gt; ComposeResult:\n\n        with Coloromatic(pattern=\"brick1\", colors=[\"red\", \"blue\"]):\n            yield Static(\"Your content here\", classes=\"banner\")\n</code></pre> <p>Notice how <code>align: center middle;</code> is used in the Coloromatic CSS to control the location of mounted child widgets. It's also possible to use the <code>dock</code> CSS property in any child widget.</p> <p>It is also important to be aware that if you want to mount child widgets into the Coloromatic and then set their alignment, it is required to set some explicit size for the Coloromatic(ie. \"1fr\", \"60%\", etc) instead of using auto. Because it uses some fancy internal rendering logic (With Textual's LineAPI), using a width or height of <code>auto</code> will prevent alignment of any child widgets from working using the CSS <code>align</code> property. Other TCSS properties such as <code>dock</code> or <code>offset</code> still work as normal.</p> <p>Note</p> <p>The Coloromatic does not have a <code>children</code> argument (at the moment), so you will need to use the context manager (<code>with Coloromatic()</code>) in order to add child widgets during a compose method. The <code>mount</code> method still works as normal.</p> <p>You can view this in action by toggling the \"Show child\" switch on the control bar in the Coloromatic Demo app.</p>"},{"location":"textual-coloromatic/docs/#updating-the-art-or-pattern","title":"Updating the Art or Pattern","text":"<p>To update the art or pattern in real-time, you can use one of several methods:</p> <ul> <li><code>update_from_string</code> to update the pattern or art using a string.</li> <li><code>update_from_path</code> to update the pattern or art using a file path.</li> <li><code>set_pattern</code> to set the pattern using a built-in pattern name.</li> </ul> <p>Alternatively, you can also set the <code>text_input</code> or <code>pattern</code> reactive properties directly.</p> <p>Let's see an example of updating the art in real-time using the <code>update_from_string</code> method:</p> <pre><code>my_string_art = \"\"\"\\\n-(-)\n-)-(\\\n\"\"\"\nmy_coloromatic = self.query_one(\"#my_coloromatic1\", Coloromatic)\nmy_coloromatic.update_from_string(my_string_art)\n</code></pre> <p>The <code>update_from_path</code> method provides a more convenient way to update directly from Path objects, which is useful if you have your art stored in external files (perhaps in a directory). Here's how you can use it:</p> <pre><code>from pathlib import Path\n\nmy_coloromatic.update_from_path(Path(\"path/to/your/art.txt\"))\n</code></pre> <p>In addition, setting the <code>pattern</code> reactive property will automatically update the Coloromatic to use one of the built-in patterns. This is shown in more detail in the \"Tiling / Repeating\" section below.</p>"},{"location":"textual-coloromatic/docs/#tiling-repeating","title":"Tiling / Repeating","text":"<p>In addition to 18 built-in patterns, the Coloromatic can tile any string entered into it. Choosing a built-in pattern simplifies this process but its not necessary. The Coloromatic has a <code>repeat</code> argument-- choosing a pattern will set this to True automatically, but you can also input any custom string and turn it on manually. The string that you input can be any size and/or numerous lines.</p> <pre><code>def compose(self) -&gt; ComposeResult:\n\n    yield Coloromatic(my_pattern, repeat=True)\n</code></pre> <p>The pattern can also be changed or updated in real-time by either setting the <code>pattern</code> reactive property or using the <code>set_pattern</code> method:</p> <pre><code>my_coloromatic = self.query_one(\"#my_coloromatic1\", Coloromatic)\nmy_coloromatic.set_pattern(\"brick1\")\n\n# Or set the reactive property directly:\nmy_coloromatic.pattern = \"brick1\" # (1)!\n</code></pre> <ol> <li>The <code>pattern</code> property takes a string literal type, which provides auto-completion and type checking in your IDE.  </li> </ol> <p>There is also a <code>repeat</code> reactive property which can be changed in real-time:</p> <pre><code>my_coloromatic = self.query_one(\"#my_coloromatic1\", Coloromatic)\nmy_coloromatic.repeat = True\n</code></pre> <p>You can see this in action in the demo app by toggling the \"Repeat\" switch on the control bar, in conjunction with the \"Custom\" button to enter a custom string in the pop-up dialog. It also works on art, and will gladly tile the art included in the demo. The built-in patterns are just enabling this under the hood.</p> <p>Full list of built-in patterns:</p> <ul> <li>brick1</li> <li>brick2</li> <li>crosses</li> <li>fence1</li> <li>fence2</li> <li>fish</li> <li>hive</li> <li>honeycomb1</li> <li>honeycomb2</li> <li>honeycomb3</li> <li>jaggedwave</li> <li>persian</li> <li>squares</li> <li>tesselation1</li> <li>tesselation2</li> <li>tesselation3</li> <li>triangles</li> <li>weave</li> </ul>"},{"location":"textual-coloromatic/docs/#colors","title":"Colors","text":"<p>Colors are added by passing in a list of colors to the <code>colors</code> argument. The colors are parsed and validated by the <code>Color</code> class from <code>textual.color</code>. It supports the parsing methods of the Color class (named colors, hexadecimal, RGB, HSL), as well as using Textual theme variables ($primary, $panel, $accent, etc).</p> <p>Here is an example using one named color, one hex color, and one RGB color:</p> <pre><code>def compose(self) -&gt; ComposeResult:\n\n    yield Coloromatic(\n        pattern=\"squares\",\n        colors=[\"maroon\", \"#1ed760\", \"rgb(255, 0, 255)\"],\n    )\n</code></pre> <p>Passing in Textual theme variables instead will allow you to ensure that the Coloromatic matches your app user's chosen theme. The Coloromatic will update itself automatically if the user changes the theme. You can, for example, do this:</p> <pre><code>def compose(self) -&gt; ComposeResult:\n\n    yield Coloromatic(\n        pattern=\"squares\",\n        colors=[\"$primary\", \"$accent\"]\n    )\n</code></pre> <p>In the above example, because we've used Textual-CSS theme variables, the colors will change automatically when the user changes the Textual theme. You can see this in action in the demo app by changing the Textual theme using the main Textual command palette (Ctrl+p / Cmd+p, or press the button on the footer in the bottom right corner) and selecting a different theme. The Coloromatic will automatically update to match the new theme.</p> <p>Colors can be changed in real-time by using the <code>set_color_list</code> method:</p> <pre><code>my_coloromatic = self.query_one(\"#my_coloromatic1\", Coloromatic)\nmy_coloromatic.set_color_list([\"maroon\", \"#1ed760\", \"rgb(255, 0, 255)\"]) # (1)!\n</code></pre> <ol> <li><code>color_list</code> is also a reactive property, but being a list it must be mutated if modified directly. This method does that for you.</li> </ol> <p>Additionally there is a wide range of named colors available through Textual. To see the named colors, run textual colors using the dev tools package, and flip over to the 'named colors' tab.</p> <p>Aside from the named colors and Textual-CSS theme variables, colors may be parsed from the following formats:</p> <p>1) Text beginning with a <code>#</code> is parsed as a hexadecimal color code, where R, G, B, and A must be hexadecimal digits (0-9A-F):</p> <pre><code>- `#RGB`\n- `#RGBA`\n- `#RRGGBB`\n- `#RRGGBBAA`\n\nExample: `#1d9690`\n</code></pre> <p>2) Alternatively, RGB colors can also be specified in the format that follows, where R, G, and B must be numbers between 0 and 255 and A must be a value between 0 and 1:</p> <pre><code>- `rgb(R,G,B)`\n- `rgb(R,G,B,A)`\n\nExample: rgb(29,150,144)\n</code></pre> <p>3) The HSL model can also be used, with a syntax similar to the above, if H is a value between 0 and 360, S and L are percentages, and A is a value between 0 and 1:</p> <pre><code>- `hsl(H,S,L)`\n- `hsla(H,S,L,A)`\n\nExample: hsl(177,68%,35%)\n</code></pre>"},{"location":"textual-coloromatic/docs/#gradient-settings","title":"Gradient Settings","text":"<p>There's 2 additional settings (aside from colors) that can be used to control the appearance of the gradient:</p> <p><code>horizontal</code> (bool)</p> <p>If True, the gradient will be horizontal instead of vertical. Note this will have no effect in smooth_strobe or fast_strobe modes, as those modes do not use a direction.</p> <p>This has a constructor argument as well as a corresponding reactive property that can be changed in real-time:</p> <pre><code># Constructor argument:\nyield Coloromatic(\n    pattern=\"squares\",\n    colors=[\"$primary\", \"$accent\"]\n    horizontal=True,  # or False to make it vertical\n)\n\n# Reactive property:\nmy_coloromatic = self.query_one(\"#my_coloromatic1\", Coloromatic)\nmy_coloromatic.horizontal = True\n</code></pre> <p><code>gradient_quality</code> (int | str)</p> <p>Refers to the number of color \"stops\" that are in a gradient. By default (\"auto\"), this will be calculated depending on the current animation type:</p> <ul> <li>When in \"gradient\": If vertical, it will be calculated based on the height of the widget. If horizontal, it will be calculated based on the width of the widget.</li> <li>When in \"smooth_strobe\": It will be set to (number of colors * 10).</li> <li>When in \"fast_strobe\": Gradient quality will be ignored as a gradient is not made in this mode.</li> </ul> <p>The color gradient will always loop itself, so if there's not enough colors to fill the entire width or height of the widget, it will loop back around. By setting the quality to be very low, you can get a retro/8-bit effect. Conversely, by setting the quality to be very high, you can make the gradient look very smooth.</p> <p>This has a constructor argument as well as a corresponding reactive property that can be changed in real-time:</p> <pre><code># Constructor argument:\nyield Coloromatic(\n    pattern=\"squares\",\n    colors=[\"#FF6347\", \"rgb(0, 128, 0)\", \"blue\"]\n    gradient_quality=10,  # or \"auto\" to use the default behavior\n)\n\n# Reactive property:\nmy_coloromatic = self.query_one(\"#my_coloromatic1\", Coloromatic)\nmy_coloromatic.gradient_quality = 10  # or \"auto\" to use the default behavior\n</code></pre> <p>Planned Feature</p> <p>At the moment there is no way to set the gradient quality to be low but still stretch the gradient to fill the entire width or height of the widget. This is a planned feature, but not yet implemented. Soon, hopefully.</p>"},{"location":"textual-coloromatic/docs/#animation-settings","title":"Animation Settings","text":"<p>Animate (bool)</p> <p>Whether to animate the Coloromatic or not. If set to False, the Coloromatic will not animate at all, and will just display the current gradient or pattern. This is good if you want to use the Coloromatic as a static background or art generator.</p> <p>If set to True, it will use a host of sensible defaults to animate the Coloromatic in a pleasing way. The default animation type is 'gradient', which will animate the gradient in the direction specified by the <code>horizontal</code> and <code>reverse</code> settings.</p> <p>This has a constructor argument as well as a corresponding reactive property that can be changed in real-time:</p> <pre><code># Constructor argument:\nyield Coloromatic(\n    pattern=\"squares\",\n    colors=[\"red\", \"green\", \"blue\"]\n    animate=True\n)\n\n# Reactive property:\nmy_coloromatic = self.query_one(\"#my_coloromatic1\", Coloromatic)\nmy_coloromatic.animated = True  # or False to stop the animation\n</code></pre> <p>Important Note</p> <p>The constructor argument is named <code>animate</code>, but the reactive property is named <code>animated</code> to avoid conflicting with the <code>animate</code> method from Textual's Widget class. This was a bit of an oversight on my part, and the <code>animate</code> argument may be renamed to <code>animated</code> in a future release to match the reactive property. For now, please be aware of this difference.</p> <p>Reverse (bool)</p> <p>If True, the animation will run in reverse. When in vertical gradient mode (horizontal = False), this will switch the animation between running downwards and running upwards. If horizontal = True, this will switch between running from left to right and running from right to left.</p> <p>This will only have a noticeable effect in 'gradient' mode, as the other modes do not have a direction. Technically, in 'smooth_strobe' or 'fast_strobe' mode it will reverse the order of the colors, but this is not very noticeable.</p> <p>This has a constructor argument as well as a corresponding reactive property that can be changed in real-time:</p> <pre><code># Constructor argument:\nyield Coloromatic(\n    pattern=\"squares\",\n    colors=[\"blueviolet\", \"seagreen\"]\n    reverse=True\n)\n\n# Reactive property:\nmy_coloromatic = self.query_one(\"#my_coloromatic1\", Coloromatic)\nmy_coloromatic.reverse = True  # or False to run the animation in the normal direction\n</code></pre> <p>Animation Type (str)</p> <p>The Coloromatic supports 3 different animation types, set using the <code>animation_type</code> argument:</p> <ul> <li>'gradient' will animate the current gradient it in the direction you specify (using the horizontal and reverse settings).</li> <li>'smooth_strobe' will create a gradient and animate the entire Coloromatic as a whole through the colors.</li> <li>'fast_strobe' will hard switch to the next color in the list. It does not make a gradient, and gradient_quality will be ignored.</li> </ul> <p>This has a constructor argument as well as a corresponding reactive property that can be changed in real-time:</p> <pre><code># Constructor argument:\nyield Coloromatic(\n    pattern=\"squares\",\n    colors=[\"blueviolet\", \"seagreen\"]\n    animate=True,\n    animation_type=\"smooth_strobe\"\n)\n\n# Reactive property:\nmy_coloromatic = self.query_one(\"#my_coloromatic1\", Coloromatic)\nmy_coloromatic.animation_type = \"smooth_strobe\" \n</code></pre> <p>FPS (float | str)</p> <p>This can be either a float greater than 0, or leave blank for \"auto\". When in auto mode, it will use the following defaults:</p> <ul> <li>'gradient': 12 FPS</li> <li>'smooth_strobe': 8 FPS</li> <li>'fast_strobe': 1 FPS</li> </ul> <p>Additionally, the reason this is a float and not int is so that you can set it to values such as 0.5 if you desire. Textual is not picky about using whole integers for internal auto refresh settings.</p> <p>This has a constructor argument as well as a corresponding reactive property that can be changed in real-time:</p> <pre><code># Constructor argument:\nyield Coloromatic(\n    pattern=\"squares\",\n    colors=[\"blueviolet\", \"seagreen\"]\n    animate=True,\n    fps=8.0  # or \"auto\" to use the default behavior\n)\n\n# Reactive property:\nmy_coloromatic = self.query_one(\"#my_coloromatic1\", Coloromatic)\nmy_coloromatic.fps = 8.0 \n</code></pre>"},{"location":"textual-coloromatic/docs/#using-the-art-loader","title":"Using the Art Loader","text":"<p>The Coloromatic can also load art from directories. This is useful if you want to store art as external .txt files. You can add directories to the Coloromatic using the <code>add_directory</code> method. After using this method, the Coloromatic's <code>file_dict</code> property will be updated to include the new directory.</p> <p>The <code>file_dict</code> property is accessible on the Coloromatic widget and can be accessed like this:</p> <pre><code>my_coloromatic = self.query_one(\"#my_coloromatic1\", Coloromatic)\nfile_dict = my_coloromatic.file_dict\n</code></pre> <p>This is a dictionary with the directory name as the key and a list of Path objects as the value. The Path objects point to .txt files in that directory. This will always contain a key called \"patterns\", which is the built-in patterns directory. After using the <code>add_directory</code> method, your additional directories will also appear as keys in <code>file_dict</code>. You can access that directory like so:</p> <pre><code>my_coloromatic.add_directory(\"path/to/your/directory_name\")\nmy_directory: list[Path] = my_coloromatic.file_dict[\"directory_name\"]\n</code></pre> <p>Once you have Path objects, you can use the <code>update_from_path</code> method to update the Coloromatic:</p> <pre><code>my_art = my_directory[0]  # Get the first Path object from the list\nmy_coloromatic.update_from_path(my_art) # (1)!\n</code></pre> <ol> <li>In your own app you would likely want to do something more robust, such as iterating through the list of Path objects to extract the file names.</li> </ol> <p>Planned Feature</p> <p>The ability to add directories to the Coloromatic should be a constructor argument in order to simplify the process. This is a planned feature, but not yet implemented. For now, you can use the <code>add_directory</code> method to add directories after the Coloromatic has been initialized.</p>"},{"location":"textual-coloromatic/docs/#messages","title":"Messages","text":"<p>The Coloromatic posts one message: <code>Updated</code>.</p> <p>Updated</p> <p>This message is posted every time the Coloromatic is updated, which includes the following conditions:</p> <ul> <li>The Coloromatic is initialized.</li> <li>The Coloromatic is resized.</li> <li>The text/content is changed.</li> <li>The animation is started or stopped.</li> <li>The colors are changed.</li> <li>The animation type is changed.</li> <li>The horizontal setting is changed.</li> <li>The gradient quality is changed.</li> </ul> <p>Attributes of the message:</p> <ul> <li><code>widget</code> - The Coloromatic widget that was updated.</li> <li><code>color_mode</code> - The color mode that was set. This is a string literal type that can be 'color', 'gradient', or 'none'.</li> <li><code>animated</code> - Whether the Coloromatic is animated. This is a boolean value.</li> </ul> <p>Example usage:</p> <pre><code>from textual import on\n...\n@on(Coloromatic.Updated)\ndef handle_coloromatic_updated(self, event: Coloromatic.Updated) -&gt; None:\n\n    self.log.debug(\n        f\"Coloromatic Updated: {event.widget} \\n\"\n        f\"Color mode: {event.color_mode} \\n\"\n        f\"Animated: {event.animated} \\n\"\n        f\"Current width: {event.widget.size.width} \\n\n        f\"Current height: {event.widget.size.height}\"\n    )\n    # Do whatever else you want with the event here.\n\n# OR using the other method:\ndef on_coloromatic_updated(self, event: Coloromatic.Updated) -&gt; None:\n    # handle event here\n</code></pre>"},{"location":"textual-coloromatic/docs/#example-app","title":"Example App","text":"<p>Here is a complete example of a Textual app that uses the Coloromatic. You can copy and paste this code.</p> <pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Static\nfrom textual_coloromatic import Coloromatic\n\nmy_pattern = \"\"\"\\\n-(-)\n-)-(\\\n\"\"\"\n\nclass MyTextualApp(App[None]):\n\n    CSS = \"\"\"\n    Screen { align: center middle; }\n    Coloromatic { \n        width: 60%; height: 60%; \n        align: center middle;\n        border: heavy $panel;\n    } \n    .banner {\n        width: auto; height: auto; \n        border: tall $accent-darken-2;\n        padding: 0 1;\n    }\n    \"\"\"\n\n    def compose(self) -&gt; ComposeResult:\n\n        with Coloromatic(\n            my_pattern,\n            repeat=True,\n            colors=[\n                \"#663399\",\n                \"rgb(124,76,205)\",\n                \"steelblue\",\n                \"$accent\"\n            ],\n            animate=True,\n            # animation_type=\"smooth_strobe\" (1)\n            horizontal=True,\n            reverse=True,\n            fps=15,\n            id=\"my_coloromatic1\"\n        ):\n            yield Static(\"Your content here\", classes=\"banner\")\n\n\nMyTextualApp().run()\n</code></pre> <ol> <li>The animation type is \"gradient\" by default. Setting it to \"smooth_strobe\" or \"fast_strobe\" would cause the <code>horizontal</code> argument to have no effect, and <code>reverse</code> would not be noticeable.</li> </ol>"},{"location":"textual-coloromatic/docs/#format-for-art-files","title":"Format for Art Files","text":"<p>The Coloromatic at the moment only supports .txt files for art. The format is very simple. It will look for a line of dashes to separate the header / metadata from the art (at least 3 dashes long). The header can contain any number of lines. Here is an example of a valid art file:</p> <pre><code>Downloaded from www.asciiart.eu\n\nhttps://www.asciiart.eu/art-and-design/patterns\n-----------------------------------------------\n\n_|___|___|__\n___|___|___|\n_|___|___|__\n___|___|___|\n</code></pre> <p>It will automatically strip any blank lines before and after the art. However, note that you should ensure each line in the pattern has trailing whitespace left intact, in order to ensure the art is displayed correctly.</p>"},{"location":"textual-coloromatic/docs/#api-reference","title":"API Reference","text":"<p>You can find the full API reference on the reference page.</p>"},{"location":"textual-coloromatic/reference/","title":"Color-O-Matic reference","text":"<p>               Bases: <code>Widget</code></p>"},{"location":"textual-coloromatic/reference/#textual_coloromatic.coloromatic.Coloromatic.animated","title":"<code>animated = animate</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to animate the gradient. This is a boolean value. If True, the gradient will animate.</p>"},{"location":"textual-coloromatic/reference/#textual_coloromatic.coloromatic.Coloromatic.animation_fps","title":"<code>animation_fps = fps</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The Frames per second for the animation. This is a float so that you can set it to values such as 0.5 if you desire. The default is 'auto', which will set the FPS to 12 for 'gradient', 12 for 'smooth_strobe', and 1 for 'fast_strobe'.</p>"},{"location":"textual-coloromatic/reference/#textual_coloromatic.coloromatic.Coloromatic.animation_type","title":"<code>animation_type = animation_type</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The type of animation to use for the gradient. This is a string literal type that can be 'gradient', 'smooth_strobe', or 'fast_strobe'. The default is 'gradient'.  - 'gradient' will animate the current gradient it in the direction you specify (using the horizontal and reverse settings). - 'smooth_strobe' will create a gradient and animate through the colors. - 'fast_strobe' will hard switch to the next color in the list. It does not make a gradient, and gradient_quality will be ignored.</p>"},{"location":"textual-coloromatic/reference/#textual_coloromatic.coloromatic.Coloromatic.color_list","title":"<code>color_list = colors</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A list of colors to use for the gradient. This is a list of strings that can be parsed by a Textual Color object. The list can be any number of colors you want. It also supports passing in Textual CSS variables ($primary, $secondary, $accent, etc). When using CSS variables, they will update automatically to match the theme whenever the user of your app changes the theme.</p>"},{"location":"textual-coloromatic/reference/#textual_coloromatic.coloromatic.Coloromatic.file_dict","title":"<code>file_dict</code>  <code>property</code>","text":"<p>Get the file dictionary from the art loader. This is a dictionary with the directory name as the key and a list of Path objects as the value. The Path objects point to .txt files in that directory.</p>"},{"location":"textual-coloromatic/reference/#textual_coloromatic.coloromatic.Coloromatic.gradient_quality","title":"<code>gradient_quality = gradient_quality</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The quality of the gradient. This means how many colors the gradient has in it. This is either 'auto' or an integer between 3 and 100. The higher the number, the smoother the gradient will be. By default, in auto mode, this will be calculated depending on the current animation type. - In gradient mode, if vertical, it will be calculated based on the height of the widget. If horizontal, it will be calculated based on the width of the widget. - In smooth_strobe mode, it will be set to (number of colors * 10). - In fast_strobe mode, this setting is ignored.</p>"},{"location":"textual-coloromatic/reference/#textual_coloromatic.coloromatic.Coloromatic.horizontal","title":"<code>horizontal = horizontal</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether the gradient should be horizontal or vertical. This is a boolean value. If True, the gradient will be horizontal. If False, the gradient will be vertical. Note that this will have no effect if the animation mode is 'smooth_strobe' or 'fast_strobe' because they do not use a direction.</p>"},{"location":"textual-coloromatic/reference/#textual_coloromatic.coloromatic.Coloromatic.list_input","title":"<code>list_input = reactive(None, always_update=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The content to render in the Coloromatic. This is the same as text_input but it will take a list of strings instead of a single string. list_input is None by default. If used it will override text_input.</p>"},{"location":"textual-coloromatic/reference/#textual_coloromatic.coloromatic.Coloromatic.pattern","title":"<code>pattern = pattern</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Choose a built-in pattern from the list of available patterns. If this is set, there is no need to set the text_input or list_input directly.</p>"},{"location":"textual-coloromatic/reference/#textual_coloromatic.coloromatic.Coloromatic.repeat","title":"<code>repeat = repeat</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Setting this to true will make the content in the Coloromatic repeat to fill the entire space of the Coloromatic. This can be used to make tiling effects. It is also set to True automatically if a pattern is set.</p>"},{"location":"textual-coloromatic/reference/#textual_coloromatic.coloromatic.Coloromatic.reverse","title":"<code>reverse = reverse</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether the animation should run in reverse. This is a boolean value. If True, the animation will run in reverse. If False, the animation will run normally. If horizontal  is False, this will switch between up and down. If horizontal is True, this will switch  between left and right. Note that this will have no effect if the animation mode is 'smooth_strobe' or 'fast_strobe' because they do not use a direction.</p>"},{"location":"textual-coloromatic/reference/#textual_coloromatic.coloromatic.Coloromatic.text_input","title":"<code>text_input = content</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The content to render in the Coloromatic. This is a string that can be any text you want. It can be a single line or multiple lines.</p>"},{"location":"textual-coloromatic/reference/#textual_coloromatic.coloromatic.Coloromatic.Updated","title":"<code>Updated</code>","text":"<p>               Bases: <code>Message</code></p> <p>Message sent when the Coloromatic is updated.</p>"},{"location":"textual-coloromatic/reference/#textual_coloromatic.coloromatic.Coloromatic.Updated.animated","title":"<code>animated = widget.animated</code>  <code>instance-attribute</code>","text":"<p>Whether the Coloromatic is animated. This is a boolean value.</p>"},{"location":"textual-coloromatic/reference/#textual_coloromatic.coloromatic.Coloromatic.Updated.color_mode","title":"<code>color_mode = widget._color_mode</code>  <code>instance-attribute</code>","text":"<p>The color mode that was set. This is a string literal type that can be 'color', 'gradient', or 'none'.</p>"},{"location":"textual-coloromatic/reference/#textual_coloromatic.coloromatic.Coloromatic.Updated.widget","title":"<code>widget = widget</code>  <code>instance-attribute</code>","text":"<p>The Coloromatic that was updated.</p>"},{"location":"textual-coloromatic/reference/#textual_coloromatic.coloromatic.Coloromatic.__init__","title":"<code>__init__(content='', *, repeat=False, pattern=None, colors=[], animate=False, animation_type='gradient', gradient_quality='auto', horizontal=False, reverse=False, fps='auto', name=None, id=None, classes=None)</code>","text":"<p>Yar</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The content to render in the Coloromatic. It can be a single line or multiple lines.</p> <code>''</code> <code>repeat</code> <code>bool</code> <p>Setting this to true will make the content in the Coloromatic repeat to fill the entire space of the Coloromatic. This can be used to make tiling effects. It is also  set to True automatically if a pattern is set.</p> <code>False</code> <code>pattern</code> <code>PATTERNS | None</code> <p>Choose a built-in pattern from the list of available patterns. If this is set, there is no need to set the text_input or list_input directly.</p> <code>None</code> <code>colors</code> <code>list[str]</code> <p>List of colors to use for the gradient. This is a list of strings that can be parsed by a Textual <code>Color</code> object that allows passing in any number of colors you want. It also supports passing in Textual CSS variables ($primary, $secondary, $accent, etc). If using CSS variables, they will update automatically to match the theme whenever the theme is changed.</p> <code>[]</code> <code>animate</code> <code>bool</code> <p>Whether to animate the gradient.</p> <code>False</code> <code>animation_type</code> <code>ANIMATION_TYPE</code> <p>Can be 'gradient', 'smooth_strobe', or 'fast_strobe'. The default is 'gradient'. - 'gradient' will animate the current gradient it in the direction you specify (using the horizontal and reverse settings). - 'smooth_strobe' will create a gradient and animate through the colors. - 'fast_strobe' will hard switch to the next color in the list. It does not make a gradient, and gradient_quality will be ignored.</p> <code>'gradient'</code> <code>gradient_quality</code> <code>int | str</code> <p>The quality of the gradient. This means how many colors the gradient has in it. This is either 'auto' or an integer between 3 and 100. The higher the number, the smoother the gradient will be. By default, in auto mode, this will be calculated depending on the current animation type. - In gradient mode, if vertical, it will be calculated based on the height of the widget. If horizontal, it will be calculated based on the width of the widget. - In smooth_strobe mode, it will be set to (number of colors * 10). - In fast_strobe mode, this setting is ignored.</p> <code>'auto'</code> <code>horizontal</code> <code>bool</code> <p>Whether the gradient should be horizontal or vertical. Note that this will have no effect if the animation mode is 'smooth_strobe' or 'fast_strobe' because they do not use a direction.</p> <code>False</code> <code>reverse</code> <code>bool</code> <p>Whether the animation should run in reverse. If horizontal is False, this will switch between up and down. If horizontal is True, this will switch between left and right. Note that this will have no effect if the animation mode is 'smooth_strobe' or 'fast_strobe' because they do not use a direction. It also does not have an effect on the order of the colors (To change the color order, insert the color list in a different order)</p> <code>False</code> <code>fps</code> <code>float | str</code> <p>The Frames per second for the animation. This is a float so that you can set it to values such as 0.5 if you desire. The default is 'auto', which will set the FPS to 12 for 'gradient', 12 for 'smooth_strobe', and 1 for 'fast_strobe'.</p> <code>'auto'</code> <code>name</code> <code>str | None</code> <p>Name of widget.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>ID of Widget.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>Space separated list of class names.</p> <code>None</code>"},{"location":"textual-coloromatic/reference/#textual_coloromatic.coloromatic.Coloromatic.add_directory","title":"<code>add_directory(directory)</code>","text":"<p>Add a new directory to the art loader. After using this method the file_dict will be updated to include the new directory.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>Path</code> <p>The directory to add.</p> required"},{"location":"textual-coloromatic/reference/#textual_coloromatic.coloromatic.Coloromatic.set_animation_type","title":"<code>set_animation_type(animation_type)</code>","text":"<p>Set the animation type of the PyFiglet widget.</p> <p>This method, unlike setting the reactive property, allows passing in a string instead of a string literal type. This is useful for passing in a variable.</p> <p>Parameters:</p> Name Type Description Default <code>animation_type</code> <code>str</code> <p>The animation type to set. Can be 'gradient', 'smooth_strobe', or 'fast_strobe'.</p> required"},{"location":"textual-coloromatic/reference/#textual_coloromatic.coloromatic.Coloromatic.set_color_list","title":"<code>set_color_list(colors)</code>","text":"<p>A list of colors to use for the gradient. This is a list of strings that can be parsed by a Textual Color object. The list can be any number of colors you want. It also supports passing in Textual CSS variables ($primary, $secondary, $accent, etc).</p> <p>Because the color_list variable is reactive, it is required to use the mutate_reactive method to set it. This method will do that for you.</p>"},{"location":"textual-coloromatic/reference/#textual_coloromatic.coloromatic.Coloromatic.set_pattern","title":"<code>set_pattern(pattern)</code>","text":"<p>Choose a pattern from a list of built-in options.</p> <p>Note that this method takes a string instead of a string literal type. This means it can take in variables as input, but it will not provide auto-complete for the available patterns. To get auto-complete, set the Coloromatic.pattern reactive variable directly.</p>"},{"location":"textual-coloromatic/reference/#textual_coloromatic.coloromatic.Coloromatic.toggle_animated","title":"<code>toggle_animated()</code>","text":"<p>Toggle the animated state of the PyFiglet widget. The widget will update with the new animated state automatically.</p>"},{"location":"textual-pyfiglet/","title":"Introduction","text":""},{"location":"textual-pyfiglet/#textual-pyfiglet","title":"Textual-Pyfiglet","text":"<p>Textual-PyFiglet is an implementation of PyFiglet for Textual.</p> <p>It provides a <code>FigletWidget</code> which makes it easy to add ASCII banners with colors and animating gradients.</p> <p>This library is related to Rich-Pyfiglet, as well as utilizes Textual-Coloromatic to provide the Color/animation abilities.</p>"},{"location":"textual-pyfiglet/#features","title":"Features","text":"<ul> <li>Full integration of Pyfiglet into Textual. Change the text or the font in real time - This can be connected to user input or modified programmatically.</li> <li>Color system built on Textual's color system. Thus, it can display any color in the truecolor/16-bit spectrum, and can take common formats such as hex code and RGB, or just a huge variety of named colors.</li> <li>Make a gradient automatically between any two colors.</li> <li>Animation system that's simple to use. Just make your gradient and toggle it on/off. It can also be started or stopped in real-time.</li> <li>The auto-size mode will re-size the widget with the new rendered ASCII output in real-time. It can also wrap to the parent container and be made to resize with your terminal.</li> <li>Animation settings can be modified to get different effects. Set a low amount of colors and a low speed for a very old-school retro look, set it to a high amount of colors and a high speed for a very smooth animation.</li> <li>The fonts are type-hinted to give you auto-completion in your code editor, eliminating the need to manually check what fonts are available.</li> <li>Included demo app to showcase the features.</li> </ul>"},{"location":"textual-pyfiglet/#demo-app","title":"Demo App","text":"<p>If you have uv or pipx, you can immediately try the demo app:</p> <pre><code>uvx textual-pyfiglet \n</code></pre> <pre><code>pipx run textual-pyfiglet\n</code></pre>"},{"location":"textual-pyfiglet/#documentation","title":"Documentation","text":""},{"location":"textual-pyfiglet/#click-here-for-documentation","title":"Click here for documentation","text":""},{"location":"textual-pyfiglet/#video","title":"Video","text":"Your browser does not support the video tag."},{"location":"textual-pyfiglet/#questions-issues-suggestions","title":"Questions, Issues, Suggestions?","text":"<p>Use the issues section for bugs or problems, and post ideas or feature requests on the TTY group discussion board.</p>"},{"location":"textual-pyfiglet/#thanks-and-copyright","title":"Thanks and Copyright","text":"<p>Both Textual-Pyfiglet and the original PyFiglet are under MIT License. See LICENSE file.</p> <p>FIGlet fonts have existed for a long time, and many people have contributed over the years.</p> <p>Original creators of FIGlet: https://www.figlet.org</p> <p>The PyFiglet creators: https://github.com/pwaller/pyfiglet</p> <p>Textual: https://github.com/Textualize/textual</p> <p>And finally, thanks to the many hundreds of people that contributed to the fonts collection.</p>"},{"location":"textual-pyfiglet/docs/","title":"Textual-PyfigletDocumentation and Guide","text":""},{"location":"textual-pyfiglet/docs/#installation","title":"Installation","text":"<pre><code>pip install textual-pyfiglet\n</code></pre> <p>Or using uv:</p> <pre><code>uv add textual-pyfiglet\n</code></pre>"},{"location":"textual-pyfiglet/docs/#demo-app","title":"Demo app","text":"<p>You can instantly try out the demo app using uv or pipx:</p> <pre><code>uvx textual-pyfiglet\n</code></pre> <pre><code>pipx run textual-pyfiglet\n</code></pre> <p>Or if you have it downloaded into your python environment, run it using the entry script:</p> <pre><code>textual-pyfiglet\n</code></pre> <p>For uv users, after adding it to your environment:</p> <pre><code>uv run textual-pyfiglet\n</code></pre>"},{"location":"textual-pyfiglet/docs/#getting-started","title":"Getting Started","text":"<p>Import into your project with:</p> <pre><code>from textual_pyfiglet import FigletWidget\n</code></pre> <p>The FigletWidget works out of the box with default settings. The most basic usage does not require any arguments aside from the input text:</p> <pre><code>from textual_pyfiglet import FigletWidget\n\ndef compose(self):\n   yield FigletWidget(\"My Banner\")\n</code></pre> <p>In the above example, it will use the default font: 'standard'. You can also specify a font as an argument:</p> <pre><code>yield FigletWidget(\"My Banner\", font=\"small\")\n</code></pre>"},{"location":"textual-pyfiglet/docs/#live-updating","title":"Live updating","text":"<p>To update the FigletWidget with new text, simply pass it in the <code>update</code> method:</p> <pre><code>self.query_one(\"#figlet1\").update(\"New text here\")\n</code></pre> <p>For instance, if you have a TextArea widget where a user can enter text, you can do this:</p> <pre><code>from textual import on\n\n@on(TextArea.Changed)\ndef text_changed(self):\n   text = self.query_one(\"#text_input\").text\n   self.query_one(\"#figlet1\").update(text)\n</code></pre> <p>The FigletWidget will then auto-update with every key-stroke.  </p>"},{"location":"textual-pyfiglet/docs/#changing-font-justification","title":"Changing font / justification","text":"<p>You can set the font directly using the <code>set_font</code> method. This method is type hinted to give you auto-completion for the fonts:</p> <pre><code>self.query(\"#figlet1\").set_font(\"small\")\n</code></pre> <p>Likewise to set the justification:</p> <pre><code>self.query(\"#figlet1\").set_justify(\"left\")\n</code></pre>"},{"location":"textual-pyfiglet/docs/#colors-gradients-and-animation","title":"Colors, Gradients, and Animation","text":"<p>This section is not complete yet (The color/animation system is still under development, but you can see it action in the demo app).</p>"},{"location":"textual-pyfiglet/docs/#api-reference","title":"API Reference","text":"<p>You can find the full API reference on the reference page.</p>"},{"location":"textual-pyfiglet/reference/","title":"FigletWidget reference","text":"<p>               Bases: <code>Coloromatic</code></p>"},{"location":"textual-pyfiglet/reference/#textual_pyfiglet.figletwidget.FigletWidget.font","title":"<code>font = font</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The font to use for the Figlet widget. The reactive attribute takes a string literal type in order to provide auto-completion and type hinting. The font must be one of the available fonts in the Pyfiglet package. You can also use the set_font() method to set the font using a string. This is useful for passing in a variable.</p>"},{"location":"textual-pyfiglet/reference/#textual_pyfiglet.figletwidget.FigletWidget.fonts_list","title":"<code>fonts_list = list(get_args(ALL_FONTS))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A list of all the available fonts in the Pyfiglet package.</p>"},{"location":"textual-pyfiglet/reference/#textual_pyfiglet.figletwidget.FigletWidget.justify","title":"<code>justify = justify</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The justification to use for the Figlet widget. The reactive attribute takes a string literal type in order to provide auto-completion and type hinting. You can also use the set_justify() method to set the justification using a string. This is useful for passing in a variable.</p>"},{"location":"textual-pyfiglet/reference/#textual_pyfiglet.figletwidget.FigletWidget.text_input","title":"<code>text_input = string</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The text to render in the Figlet widget. You can set this directly, or use the update() method to set it.</p>"},{"location":"textual-pyfiglet/reference/#textual_pyfiglet.figletwidget.FigletWidget.__init__","title":"<code>__init__(text='', *, font='standard', justify='center', colors=[], animate=False, animation_type='gradient', gradient_quality='auto', horizontal=False, reverse=False, fps='auto', name=None, id=None, classes=None)</code>","text":"<p>Create a FigletWidget.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to render in the Figlet widget.</p> <code>''</code> <code>font</code> <code>PyFiglet</code> <p>Font to use for the ASCII art. Default is 'standard'.</p> <code>'standard'</code> <code>justify</code> <code>PyFiglet</code> <p>Justification for the text. Default is 'center'.</p> <code>'center'</code> <code>colors</code> <code>list[str]</code> <p>List of colors to use for the gradient. This is a list of strings that can be parsed by a Textual <code>Color</code> object that allows passing in any number of colors you want. It also supports passing in Textual CSS variables ($primary, $secondary, $accent, etc). If using CSS variables, they will update automatically to match the theme whenever the theme is changed.</p> <code>[]</code> <code>animate</code> <code>bool</code> <p>Whether to animate the gradient.</p> <code>False</code> <code>animation_type</code> <code>ANIMATION_TYPE</code> <p>Can be 'gradient', 'smooth_strobe', or 'fast_strobe'. The default is 'gradient'. - 'gradient' will animate the current gradient it in the direction you specify (using the horizontal and reverse settings). - 'smooth_strobe' will create a gradient and animate through the colors. - 'fast_strobe' will hard switch to the next color in the list. It does not make a gradient, and gradient_quality will be ignored.</p> <code>'gradient'</code> <code>gradient_quality</code> <code>int | str</code> <p>The quality of the gradient. This means how many colors the gradient has in it. This is either 'auto' or an integer between 3 and 100. The higher the number, the smoother the gradient will be. By default, in auto mode, this will be calculated depending on the current animation type. - In gradient mode, if vertical, it will be calculated based on the height of the widget. If horizontal, it will be calculated based on the width of the widget. - In smooth_strobe mode, it will be set to (number of colors * 10). - In fast_strobe mode, this setting is ignored.</p> <code>'auto'</code> <code>horizontal</code> <code>bool</code> <p>Whether the gradient should be horizontal or vertical. Note that this will have no effect if the animation mode is 'smooth_strobe' or 'fast_strobe' because they do not use a direction.</p> <code>False</code> <code>reverse</code> <code>bool</code> <p>Whether the animation should run in reverse. If horizontal is False, this will switch between up and down. If horizontal is True, this will switch between left and right. Note that this will have no effect if the animation mode is 'smooth_strobe' or 'fast_strobe' because they do not use a direction.</p> <code>False</code> <code>fps</code> <code>float | str</code> <p>The Frames per second for the animation. This is a float so that you can set it to values such as 0.5 if you desire. The default is 'auto', which will set the FPS to 12 for 'gradient', 12 for 'smooth_strobe', and 1 for 'fast_strobe'.</p> <code>'auto'</code> <code>name</code> <code>str | None</code> <p>Name of widget.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>ID of Widget.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>Space separated list of class names.</p> <code>None</code>"},{"location":"textual-pyfiglet/reference/#textual_pyfiglet.figletwidget.FigletWidget.figlet_quick","title":"<code>figlet_quick(text, font='standard', width=80, justify='left')</code>  <code>classmethod</code>","text":"<p>This is a standalone class method. It just provides quick access to the figlet_format function in the pyfiglet package. It also adds type hinting / auto-completion for the fonts list.</p>"},{"location":"textual-pyfiglet/reference/#textual_pyfiglet.figletwidget.FigletWidget.get_figlet_as_string","title":"<code>get_figlet_as_string()</code>","text":"<p>Return the PyFiglet render as a string.</p>"},{"location":"textual-pyfiglet/reference/#textual_pyfiglet.figletwidget.FigletWidget.set_font","title":"<code>set_font(font)</code>","text":"<p>Set the font of the PyFiglet widget. This method, unlike setting the reactive property, allows passing in a string instead of a string literal type. This is useful for passing in a variable. But unlike the reactive property, this does not provide any auto-completion for the available fonts. To get auto-completion for available fonts, set <code>self.font</code> directly with a raw string literal type.</p> <p>Parameters:</p> Name Type Description Default <code>font</code> <code>str</code> <p>The font to set. Must be one of the available fonts.</p> required"},{"location":"textual-pyfiglet/reference/#textual_pyfiglet.figletwidget.FigletWidget.set_justify","title":"<code>set_justify(justify)</code>","text":"<p>Set the justification of the PyFiglet widget. This method, unlike the setting the reactive property, allows passing in a string instead of a string literal type. This is useful for passing in a variable.</p> <p>Parameters:</p> Name Type Description Default <code>justify</code> <code>str</code> <p>The justification to set. Can be 'left', 'center', or 'right'.</p> required"},{"location":"textual-pyfiglet/reference/#textual_pyfiglet.figletwidget.FigletWidget.set_text","title":"<code>set_text(text)</code>","text":"<p>Alias for the update() method. This is here for convenience.</p> <p>Parameters:</p> Name Type Description Default <code>new_text</code> <p>The text to update the PyFiglet widget with.</p> required"},{"location":"textual-pyfiglet/reference/#textual_pyfiglet.figletwidget.FigletWidget.update","title":"<code>update(text)</code>","text":"<p>Update the PyFiglet area with new text. You can tie this into a user input for real-time updating (or set <code>text_input</code> directly).</p> <p>Parameters:</p> Name Type Description Default <code>new_text</code> <p>The text to update the PyFiglet widget with.</p> required"},{"location":"textual-slidecontainer/","title":"Introduction","text":""},{"location":"textual-slidecontainer/#textual-slidecontainer","title":"textual-slidecontainer","text":"<p>This is a library that provides a custom container (widget) called the SlideContainer.</p> <p>It is designed to make it extremely simple to implement sliding menu bars in your Textual apps.</p>"},{"location":"textual-slidecontainer/#features","title":"Features","text":"<ul> <li>Usage is a single line of code with the default settings. Everything is handled automatically.</li> <li>Set a precise dock position - The dock position argument adds topleft, topright, bottomleft, and bottomright to Textual's 4 arguments of top, bottom, left, and right for 8 dock positions total.</li> <li>Set the slide direction - Containers can slide to the left, right, top, or bottom. This can be changed or tweaked independently of the dock position (For example, dock to bottom right, then you can slide down or slide right.)</li> <li>Enable or disable Floating mode - With a boolean, containers can switch between floating on top of your app, or being a part of it and affecting the layout.</li> <li>Set the default state - Containers can be set to start in closed mode.</li> <li>Set the container to dock as an initialization argument.</li> <li>Floating containers automatically dock to the edge they move towards (this can be changed).</li> <li>Change how the animation looks with the duration, fade, and easing_function arguments.</li> <li>Included demo application which has comments in the code.</li> </ul>"},{"location":"textual-slidecontainer/#demo-app","title":"Demo App","text":"<p>If you have uv or pipx, you can immediately try the demo app:</p> <pre><code>uvx textual-slidecontainer\n</code></pre> <pre><code>pipx run textual-slidecontainer\n</code></pre>"},{"location":"textual-slidecontainer/#documentation","title":"Documentation","text":""},{"location":"textual-slidecontainer/#click-here-for-documentation","title":"Click here for documentation","text":""},{"location":"textual-slidecontainer/#video","title":"Video","text":"Your browser does not support the video tag."},{"location":"textual-slidecontainer/#questions-issues-suggestions","title":"Questions, Issues, Suggestions?","text":"<p>Use the issues section for bugs or problems, and post ideas or feature requests on the TTY group discussion board.</p>"},{"location":"textual-slidecontainer/docs/","title":"Textual-SlideContainerDocumentation and Guide","text":""},{"location":"textual-slidecontainer/docs/#requirements","title":"Requirements","text":"<ul> <li>Python &gt;= 3.9</li> <li>Textual &gt;= 3.71</li> </ul>"},{"location":"textual-slidecontainer/docs/#installation","title":"Installation","text":"<pre><code>pip install textual-slidecontainer\n</code></pre> <p>Or using uv:</p> <pre><code>uv add textual-slidecontainer\n</code></pre>"},{"location":"textual-slidecontainer/docs/#demo-app","title":"Demo app","text":"<p>You can instantly try out the demo app using uv or pipx:</p> <pre><code>uvx textual-slidecontainer\n</code></pre> <pre><code>pipx run textual-slidecontainer\n</code></pre> <p>Or if you have it downloaded into your python environment, run it using the entry script:</p> <pre><code>textual-slidecontainer\n</code></pre> <p>For uv users, after adding it to your environment:</p> <pre><code>uv run textual-slidecontainer\n</code></pre>"},{"location":"textual-slidecontainer/docs/#getting-started","title":"Getting Started","text":"<p>Import into your project with:</p> <pre><code>from textual_slidecontainer import SlideContainer\n</code></pre> <p>Here is an example of the most basic usage:</p> <pre><code>from textual_slidecontainer import SlideContainer\n\ndef compose(self):\n    with SlideContainer(id = \"my_slidecontainer\", slide_direction = \"up\"):\n        yield Static(\"Your widgets here\")\n</code></pre> <p>You can set the container's width and height in CSS as you usually would. Note that the above example will dock to the top of your screen automatically because it is in floating mode (floating is the default).</p>"},{"location":"textual-slidecontainer/docs/#dock-position","title":"Dock position","text":"<p>The container has a <code>dock_position</code> argument which adds 4 new dock positions to the base 4 of top, left, right, and bottom. The 8 possible dock positions are:</p> <ul> <li>topleft</li> <li>top</li> <li>topright</li> <li>left</li> <li>right</li> <li>bottomleft</li> <li>bottom</li> <li>bottomright</li> </ul> <p>The slide direction and dock position can be changed independently. For example, you might set the dock position to \"bottomright\" and then set the slide direction to be either right or down.</p> <pre><code>def compose(self):\n    with SlideContainer(\n        id = \"my_slidecontainer\", slide_direction = \"bottom\", dock_position = \"bottomright\"       \n    ):\n        yield Static(\"Your widgets here\")\n</code></pre>"},{"location":"textual-slidecontainer/docs/#start-closed-hidden","title":"Start closed / Hidden","text":"<p>If you'd like the container to start closed/hidden, simply set <code>start_open</code> to False:</p> <pre><code>def compose(self):\n    with SlideContainer(\n        id = \"my_slidecontainer\", slide_direction = \"left\", start_open = False      \n    ):\n        yield Static(\"Your widgets here\")\n</code></pre>"},{"location":"textual-slidecontainer/docs/#all-arguments","title":"All Arguments","text":"<p>Here's an example using all the arguments:</p> <pre><code>with SlideContainer(\n    classes = \"my_container_classes\",\n    id = \"my_slidecontainer\",\n    start_open = False,         \n    slide_direction = \"down\",\n    dock_position = \"bottomleft\",  \n    floating = False,                 # default is True\n    fade = True,\n    duration = 0.6,                   # the default is 0.8     \n    easing_function = \"out_bounce\"    # default is \"out_cubic\".                           \n):\n    yield Static(\"Your widgets here\")\n</code></pre>"},{"location":"textual-slidecontainer/docs/#ways-of-making-the-container","title":"Ways of Making the Container","text":"<p>You can also use the other Textual methods of using a container: passing in a list of children, or making a custom class that inherits from SlideContainer.</p> <p>Passing in a list of children (the normal Textual syntax):</p> <pre><code>window_widgets: list[Widget] = [\n    Button(\"Label\", id=\"button_foo\"),\n    Static(\"Your widgets here\")\n]\nyield SlideContainer(*window_widgets)\n</code></pre> <p>You can just as easily define everything you want in a custom container (again, the normal Textual syntax):</p> <pre><code>class MySlideContainer(SlideContainer):\n\n    def __init__(self):\n        super().__init__(\n            slide_direction=\"top\",\n            start_open=False,\n            id=\"your_slidecontainer\"\n        )\n\n    def compose(self):\n        yield Button(\"Label\", id=\"button_foo\")\n        yield Static(\"Your widgets here\")\n</code></pre>"},{"location":"textual-slidecontainer/docs/#full-demonstration","title":"Full demonstration","text":"<p>Here's a full demonstration of it being used in a small app. You can copy and paste this code.</p> <pre><code>from textual.app import App\nfrom textual import on\nfrom textual.widgets import Static, Footer, Button\nfrom textual.containers import Container\n\nfrom textual_slidecontainer import SlideContainer\n\nclass TextualApp(App):\n\n    DEFAULT_CSS = \"\"\"\n    #my_container {\n        width: 1fr; height: 1fr; border: solid red;\n        align: center middle; content-align: center middle;\n    }\n    #my_static { border: solid blue; width: 1fr;}\n    SlideContainer {\n        width: 25; height: 75%;\n        background: $panel; align: center middle;\n    }\n    \"\"\"\n    def compose(self):\n\n        # The container will start closed / hidden:\n        with SlideContainer(slide_direction=\"left\", start_open=False):\n            yield Static(\"This is content in the slide container\", id=\"my_static\")\n        with Container(id=\"my_container\"):\n            yield Button(\"Show/Hide slide container\", id=\"toggle_slide\")\n        yield Footer()\n\n    @on(Button.Pressed, \"#toggle_slide\")\n    def toggle_slide(self) -&gt; None:\n        self.query_one(SlideContainer).toggle()\n\nTextualApp().run()\n</code></pre> <p>Check out the source code of the demo app to see a more in-depth example.</p>"},{"location":"textual-slidecontainer/docs/#messages","title":"Messages","text":"<p>The SlideContainer posts two messages:</p> <ul> <li><code>SlideCompleted</code></li> <li><code>InitCompleted</code></li> </ul>"},{"location":"textual-slidecontainer/docs/#slidecompleted","title":"SlideCompleted","text":"<p>This message will be posted every time that a slide is completed. This is useful if you need something to refresh every time the container slides open or closed (ie. refreshing elements on your screen affected by layout changes, or something inside the SlideContainer itself). It contains two attributes:</p> <ul> <li><code>state</code>: bool - Whether it just slid open or closed.     True = open, False = closed.</li> <li><code>container</code> - The container that did the sliding.</li> </ul> <p>Example usage:</p> <pre><code>from textual import on\n\n@on(SlideContainer.SlideCompleted, \"#my_container\")    # Note the selector is optional.\ndef my_slide_completed(self, event: SlideContainer.SlideCompleted):\n\n    self.notify(f\"Slide completed: {event.container}: {event.state}\")\n\n# OR using the other method:\ndef on_slide_container_slide_completed(self, event: SlideContainer.SlideCompleted):\n    # handle your loading screen here.\n</code></pre>"},{"location":"textual-slidecontainer/docs/#initcompleted","title":"InitCompleted","text":"<p>Because the container needs to know where it should be on the screen in open mode, starting in closed mode can sometimes reveal some graphical glitches that are tricky to deal with. In order to help solve this problem, the container provides an <code>InitCompleted</code> message. This is only posted after the container has been mounted and moved to its starting position. Note this message is sent regardless of whether the container starts closed, but its usefulness is most likely for the ones that do.</p> <p>It contains one attribute:</p> <ul> <li><code>container</code> - The container that just initialized.</li> </ul> <pre><code>from textual import on\n\n@on(SlideContainer.InitCompleted, \"#my_container\")    # Note the selector is optional.\ndef my_container_loaded(self, event: SlideContainer.InitCompleted):\n    self.log(f\"Slide container initialized: {event.container}\")\n    # However you want to deal with your loading logic  here.\n\n# OR using the other method:\ndef on_slide_container_init_completed(self, event: SlideContainer.InitCompleted):\n    # handle your loading logic  here.\n</code></pre> <p>You can see an example of this being used in the demo app.</p>"},{"location":"textual-slidecontainer/docs/#api-reference","title":"API Reference","text":"<p>You can find the full API reference on the reference page.</p>"},{"location":"textual-slidecontainer/reference/","title":"SlideContainer reference","text":"<p>               Bases: <code>Container</code></p> <p>See init for usage and information.</p>"},{"location":"textual-slidecontainer/reference/#textual_slidecontainer.slidecontainer.SlideContainer.state","title":"<code>state = reactive[bool](True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>State of the container. True = container open, False = container closed.     You can set this directly, or you can use the toggle() method.</p>"},{"location":"textual-slidecontainer/reference/#textual_slidecontainer.slidecontainer.SlideContainer.InitCompleted","title":"<code>InitCompleted</code>","text":"<p>               Bases: <code>Message</code></p> <p>Message sent when the container is ready. This is only sent if the container is starting closed.</p>"},{"location":"textual-slidecontainer/reference/#textual_slidecontainer.slidecontainer.SlideContainer.InitCompleted.container","title":"<code>container = container</code>  <code>instance-attribute</code>","text":"<p>The container that is ready.</p>"},{"location":"textual-slidecontainer/reference/#textual_slidecontainer.slidecontainer.SlideContainer.InitCompleted.control","title":"<code>control</code>  <code>property</code>","text":"<p>The SlideContainer that sent the message.</p>"},{"location":"textual-slidecontainer/reference/#textual_slidecontainer.slidecontainer.SlideContainer.SlideCompleted","title":"<code>SlideCompleted</code>","text":"<p>               Bases: <code>Message</code></p> <p>Message sent when the container is opened or closed. This is sent after the animation is complete.</p>"},{"location":"textual-slidecontainer/reference/#textual_slidecontainer.slidecontainer.SlideContainer.SlideCompleted.container","title":"<code>container = container</code>  <code>instance-attribute</code>","text":"<p>The container that has finished sliding.</p>"},{"location":"textual-slidecontainer/reference/#textual_slidecontainer.slidecontainer.SlideContainer.SlideCompleted.control","title":"<code>control</code>  <code>property</code>","text":"<p>The SlideContainer that sent the message.</p>"},{"location":"textual-slidecontainer/reference/#textual_slidecontainer.slidecontainer.SlideContainer.SlideCompleted.state","title":"<code>state = state</code>  <code>instance-attribute</code>","text":"<p>The state of the container. True = container open, False = container closed.</p>"},{"location":"textual-slidecontainer/reference/#textual_slidecontainer.slidecontainer.SlideContainer.__init__","title":"<code>__init__(*children, slide_direction, dock_position='none', floating=True, start_open=True, fade=False, offset_x=0, offset_y=0, duration=0.8, easing_function='out_cubic', name=None, id=None, classes=None, disabled=False)</code>","text":"<p>Construct a Sliding Container widget.</p> <p>Parameters:</p> Name Type Description Default <code>*children</code> <code>Widget</code> <p>Child widgets.</p> <code>()</code> <code>slide_direction</code> <code>SLIDE_DIRECTION</code> <p>Can be: - left - right - up - down NOTE: This is not tied to dock position. Feel free to experiment.</p> required <code>dock_position</code> <code>DOCK_POSITION</code> <p>The position to dock the container. Can be: - topleft - top - topright - left - right - bottomleft - bottom - bottomright - none NOTE: When floating is True, this is automatically set to the same direction as the slide direction. (up = top, down = bottom, left = left, right = right) Floating SlideContainers MUST be docked to a direction. However, you can change the dock direction. The dock direction does not need to be the same as the slide direction.</p> <code>'none'</code> <code>floating</code> <code>bool</code> <p>Whether the container should float overtop on its own layer.</p> <code>True</code> <code>start_open</code> <code>bool</code> <p>Whether the container should start open(visible) or closed(hidden).</p> <code>True</code> <code>fade</code> <code>bool</code> <p>Whether to also fade the container when it slides.</p> <code>False</code> <code>offset_x</code> <code>int</code> <p>The</p> <code>0</code> <code>offset_y</code> <code>int</code> <p>The</p> <code>0</code> <code>duration</code> <code>float</code> <p>The duration of the slide animation in seconds.</p> <code>0.8</code> <code>easing_function</code> <code>EASING_FUNC</code> <p>The easing function to use for the animation.</p> <code>'out_cubic'</code> <code>name</code> <code>str | None</code> <p>The name of the widget.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>The ID of the widget in the DOM.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>The CSS classes for the widget.</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>Whether the widget is disabled or not.</p> <code>False</code>"},{"location":"textual-slidecontainer/reference/#textual_slidecontainer.slidecontainer.SlideContainer.close","title":"<code>close()</code>","text":"<p>Close the container. This is the same as setting state to False.</p>"},{"location":"textual-slidecontainer/reference/#textual_slidecontainer.slidecontainer.SlideContainer.open","title":"<code>open()</code>","text":"<p>Open the container. This is the same as setting state to True.</p>"},{"location":"textual-slidecontainer/reference/#textual_slidecontainer.slidecontainer.SlideContainer.set_slide_direction","title":"<code>set_slide_direction(direction)</code>","text":"<p>Set the slide direction of the container.</p> <p>Parameters:</p> Name Type Description Default <code>direction</code> <code>str</code> <p>The new slide direction. Must be one of 'left', 'right', 'up', or 'down'.</p> required"},{"location":"textual-slidecontainer/reference/#textual_slidecontainer.slidecontainer.SlideContainer.toggle","title":"<code>toggle()</code>","text":"<p>Toggle the state of the container. Opens or closes the container.</p>"},{"location":"textual-window/","title":"Introduction","text":""},{"location":"textual-window/#textual-window","title":"Textual-Window","text":"<p>Textual-Window is an extension library for Textual.</p> <p>It provides a Window widget, along with an included WindowBar and WindowSwitcher, that makes it easy to create a desktop GUI-like experience inside of a TUI built with Textual.</p> <p>Window widgets are floating, draggable, resizable, snappable, closable, and you can even cycle through them in a manner similar to alt-tab. It's like a mini desktop inside of your terminal. (Is it ridiculous? Yes, yes it is. But is it awesome? Also yes.)</p>"},{"location":"textual-window/#features","title":"Features","text":"<ul> <li>Drag, resize, and maximize windows. Close windows with ctrl+w.</li> <li>Windows can focus, and highlight to show which one is focused. Controls are passed from the highlighted window to its inner scrolling container.</li> <li>Included fully-automatic Window Bar (aka Task Bar). Don't worry about keeping track of the windows. Just compose and go. The library will track them for you.</li> <li>Included Window Switcher, to cycle window focus in a manner similar to alt-tab. The most recently focused window is always at the start (left side).</li> <li>Set the window's min and max size through Textual CSS as you normally would, and the window will respect those settings when resizing. Resizing can also be disabled per window.</li> <li>Windows snap to the terminal by default, toggle this on/off in real-time.</li> <li>WindowBar can toggle the dock between top and bottom of the screen in real-time.</li> <li>Window Bar has right-click context menus, one for each window, as well as a global context menu with options such as close/open all or snap/unsnap all.</li> <li>Set the window's starting location on the screen using plain descriptions (ie. right + bottom), as well as whether to initialize open or closed.</li> <li>An optional hamburger menu for custom callbacks - The window has a 'menu_options' argument. Pass in a dictionary of functions (label + callback) and these functions will appear in that window's hamburger menu. (If nothing is passed in, the menu is not shown).</li> <li>Smooth fade in/out animation adds a convincing touch.</li> <li>Create windows in all 3 ways textual supports - context manager, passing in a list of children, and custom Window objects.</li> <li>...and many small QoL things too numerous to list here.</li> </ul> <p>See the documentation for more details.</p> <p>Note: This library is under pretty active development and so the API is subject to change. If you find a bug, please report it on the issues page.</p>"},{"location":"textual-window/#demo-app","title":"Demo App","text":"<p>If you have uv or pipx, you can immediately try the demo app:</p> <pre><code>uvx textual-window \n</code></pre> <pre><code>pipx run textual-window\n</code></pre>"},{"location":"textual-window/#documentation","title":"Documentation","text":""},{"location":"textual-window/#click-here-for-documentation","title":"Click here for documentation","text":""},{"location":"textual-window/#video","title":"Video","text":"Your browser does not support the video tag."},{"location":"textual-window/#questions-issues-suggestions","title":"Questions, Issues, Suggestions?","text":"<p>Use the issues section for bugs or problems, and post ideas or feature requests on the TTY group discussion board.</p>"},{"location":"textual-window/docs/","title":"Textual-WindowDocumentation and Guide","text":""},{"location":"textual-window/docs/#installation","title":"Installation","text":"<pre><code>pip install textual-window\n</code></pre> <p>Or using uv:</p> <pre><code>uv add textual-window\n</code></pre>"},{"location":"textual-window/docs/#demo-app","title":"Demo app","text":"<p>You can instantly try out the demo app using uv or pipx:</p> <pre><code>uvx textual-window\n</code></pre> <pre><code>pipx run textual-window\n</code></pre> <p>Or if you have it downloaded into your python environment, run it using the entry script:</p> <pre><code>textual-window\n</code></pre> <p>For uv users, after adding it to your environment:</p> <pre><code>uv run textual-window\n</code></pre>"},{"location":"textual-window/docs/#getting-started","title":"Getting Started","text":"<p>Import into your project with:</p> <pre><code>from textual_window import Window, WindowBar, WindowSwitcher\n</code></pre> <p>Apologies, as this library is still in development, the API may change frequently and there is not yet any documentation on how to use it. However, you can refer to the demo app for examples of how to use the components.</p>"},{"location":"textual-window/docs/#api-reference","title":"API Reference","text":"<p>You can find the full API reference on the reference page.</p>"},{"location":"textual-window/reference/","title":"Window reference","text":"<p>               Bases: <code>Widget</code></p>"},{"location":"textual-window/reference/#textual_window.window.Window.id","title":"<code>id</code>  <code>property</code> <code>writable</code>","text":"<p>The ID of this node. This property is overridden from DOMnode because <code>id</code> cannot be none in the Window class.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.maximize_state","title":"<code>maximize_state = reactive(False, init=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The maximize state of the window. You can modify this directly if you wish.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.name","title":"<code>name</code>  <code>property</code>","text":"<p>The name of the node. This property is overridden from DOMnode because <code>name</code> cannot be none in the Window class.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.open_state","title":"<code>open_state = reactive(False, init=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The open/minimized state of the window. You can modify this directly if you wish. Note that this does not remove the window from the DOM or the window bar/manager. You must use <code>remove_window()</code> or <code>close_window</code> to do that.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.snap_state","title":"<code>snap_state = reactive(True, init=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The lock state (snap to parent) of the window. You can modify this directly if you wish.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.Closed","title":"<code>Closed</code>","text":"<p>               Bases: <code>WindowMessage</code></p> <p>Message sent when the window is closed.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.Initialized","title":"<code>Initialized</code>","text":"<p>               Bases: <code>WindowMessage</code></p> <p>Message sent when the window is completed initialization.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.Minimized","title":"<code>Minimized</code>","text":"<p>               Bases: <code>WindowMessage</code></p> <p>Message sent when the window is minimized.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.Opened","title":"<code>Opened</code>","text":"<p>               Bases: <code>WindowMessage</code></p> <p>Message sent when the window is opened.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.__init__","title":"<code>__init__(*children, id, mode='temporary', icon=None, classes=None, name=None, starting_horizontal='center', starting_vertical='middle', start_open=False, start_snapped=True, allow_resize=True, allow_maximize=False, menu_options=None, styles_dict=None, animated=True, show_title=True, disabled=False)</code>","text":"<p>Initialize a window widget.</p> <p>Parameters:</p> Name Type Description Default <code>*children</code> <code>Widget</code> <p>Child widgets.</p> <code>()</code> <code>id</code> <code>str</code> <p>The ID of the window - Used for the window's title bar, the WindowBar, and the WindowSwitcher. <code>id</code> is REQUIRED, unlike normal Textual widgets. Underscores will be replaced with spaces for displaying in the title bar, window bar, and window switcher. If you want the display name to be different from the ID for some reason, you can set the <code>name</code> argument to whatever display name you'd like. If you do not want the ID to be shown in the title bar, You can set the <code>show_title</code> argument to False.</p> required <code>mode</code> <code>MODE</code> <p>This controls whether the widget should be removable, or a permanent fixture of your app. In temporary mode, the close button will remove the window from the DOM as well as the window bar and manager (like a normal desktop would). Ctrl-w behavior in this mode is to remove the window. In permanent mode, the close button is removed from the window and windowbar menus, the window is only able to be minimized, and Ctrl-w behavior is to minimize the window. (minimize and close will do the same thing in this mode).</p> <code>'temporary'</code> <code>icon</code> <code>str | None</code> <p>The icon for the window to use in the title bar and window bar.</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>The CSS classes for the widget.</p> <code>None</code> <code>name</code> <code>str | None</code> <p>The name of the window. If you wish for the display name to be different than the ID for some reason, you can set this to whatever display name you'd like.</p> <code>None</code> <code>starting_horizontal</code> <code>STARTING_HORIZONTAL</code> <p>The starting horizontal position of the window.</p> <code>'center'</code> <code>starting_vertical</code> <code>STARTING_VERTICAL</code> <p>The starting vertical position of the window.</p> <code>'middle'</code> <code>start_open</code> <code>bool</code> <p>Whether the window should start open or closed.</p> <code>False</code> <code>start_snapped</code> <code>bool</code> <p>Whether the window should start snapped (locked) within the parent area.</p> <code>True</code> <code>allow_resize</code> <code>bool</code> <p>Whether the window should be resizable.</p> <code>True</code> <code>allow_maximize</code> <code>bool</code> <p>Whether to show the maximize button on the top bar.</p> <code>False</code> <code>menu_options</code> <code>dict[str, Callable[..., Optional[Any]]] | None</code> <p>A dictionary of options to show in a hamburger menu. The hamburger menu will be shown automatically if you pass in any options. The key is the name of the option as it will be displayed in the menu. The value is a callable that will be called when the option is selected.</p> <code>None</code> <code>styles_dict</code> <code>WindowStylesDict | None</code> <p>A dictionary of styles to apply to the window. Setting styles through the constructor is useful for dynamic applications where you may have some kind of external process manager that creates windows, or you can't use CSS for some reason.</p> <code>None</code> <code>animated</code> <code>bool</code> <p>Whether the window should be animated. This will add a fade in/out effect when opening/closing the window. You can modify the <code>animation_duration</code> attribute to change the duration of the animation.</p> <code>True</code> <code>show_title</code> <code>bool</code> <p>Whether to show the title in the title bar or not.</p> <code>True</code> <code>disabled</code> <code>bool</code> <p>Whether the widget is disabled or not.</p> <code>False</code>"},{"location":"textual-window/reference/#textual_window.window.Window.bring_forward","title":"<code>bring_forward()</code>","text":"<p>This is called automatically when the window is opened, as long as <code>auto_bring_forward</code> is set to True on the window. If you want manual control, you can set that to False and call this method yourself.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.clamp_into_parent_area","title":"<code>clamp_into_parent_area()</code>","text":"<p>This function returns the widget into its parent area. </p> <p>There shouldn't be any need to call this manually, but it is here if you need it.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.close_window","title":"<code>close_window()</code>","text":"<p>Alias for remove_window. (You may be looking for <code>Window.minimize</code>). This will remove the window from the DOM and the Window Bar.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.disable_snap","title":"<code>disable_snap()</code>","text":"<p>Disable window locking (set snap_state to False)</p>"},{"location":"textual-window/reference/#textual_window.window.Window.enable_snap","title":"<code>enable_snap()</code>","text":"<p>Enable window locking (set snap_state to True)</p>"},{"location":"textual-window/reference/#textual_window.window.Window.maximize","title":"<code>maximize()</code>","text":"<p>Resize the window to its maximum.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.minimize","title":"<code>minimize()</code>","text":"<p>This will close the window, but not remove it from the DOM. Runs the close animatiom and blurs all children.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.mount_all_in_window","title":"<code>mount_all_in_window(widgets, *, before=None, after=None)</code>","text":"<p>Mount widgets from an iterable into the Window. </p> <p>Do not use <code>mount</code> or <code>mount_all</code> to mount widgets inside of the window. Use this (or <code>mount_in_window</code>) instead.</p> <p>Parameters:</p> Name Type Description Default <code>widgets</code> <code>Iterable[Widget]</code> <p>An iterable of widgets.</p> required <code>before</code> <code>int | str | Widget | None</code> <p>Optional location to mount before. An <code>int</code> is the index of the child to mount before, a <code>str</code> is a <code>query_one</code> query to find the widget to mount before.</p> <code>None</code> <code>after</code> <code>int | str | Widget | None</code> <p>Optional location to mount after. An <code>int</code> is the index of the child to mount after, a <code>str</code> is a <code>query_one</code> query to find the widget to mount after.</p> <code>None</code> <p>Returns:</p> Type Description <code>AwaitMount</code> <p>An awaitable object that waits for widgets to be mounted.</p> <p>Raises:</p> Type Description <code>MountError</code> <p>If there is a problem with the mount request.</p> Note <p>Only one of <code>before</code> or <code>after</code> can be provided. If both are provided a <code>MountError</code> will be raised.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.mount_in_window","title":"<code>mount_in_window(*widgets, before=None, after=None)</code>","text":"<p>Mount widgets inside of the window. </p> <p>Do not use <code>mount</code> or <code>mount_all</code> to mount widgets inside of the window. Use this (or <code>mount_all_in_window</code>) instead.</p> <p>Parameters:</p> Name Type Description Default <code>*widgets</code> <code>Widget</code> <p>The widget(s) to mount.</p> <code>()</code> <code>before</code> <code>int | str | Widget | None</code> <p>Optional location to mount before. An <code>int</code> is the index of the child to mount before, a <code>str</code> is a <code>query_one</code> query to find the widget to mount before.</p> <code>None</code> <code>after</code> <code>int | str | Widget | None</code> <p>Optional location to mount after. An <code>int</code> is the index of the child to mount after, a <code>str</code> is a <code>query_one</code> query to find the widget to mount after.</p> <code>None</code> <p>Returns:</p> Type Description <code>AwaitMount</code> <p>An awaitable object that waits for widgets to be mounted.</p> <p>Raises:</p> Type Description <code>MountError</code> <p>If there is a problem with the mount request.</p> Note <p>Only one of <code>before</code> or <code>after</code> can be provided. If both are provided a <code>MountError</code> will be raised.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.open_window","title":"<code>open_window()</code>","text":"<p>Runs the open animation (if animate=True), and brings the window forward (if <code>auto_bring_forward</code> is set to True on the window).</p>"},{"location":"textual-window/reference/#textual_window.window.Window.remove_children_in_window","title":"<code>remove_children_in_window(selector='*')</code>","text":"<p>Remove the widgets inside of this window from the DOM.</p> <p>Parameters:</p> Name Type Description Default <code>selector</code> <code>str | type[QueryType] | Iterable[Widget]</code> <p>A CSS selector or iterable of widgets to remove.</p> <code>'*'</code> <p>Returns:</p> Type Description <code>AwaitRemove</code> <p>An awaitable object that waits for the widgets to be removed.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.remove_window","title":"<code>remove_window()</code>","text":"<p>This will remove the window from the DOM and the Window Bar.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.reset_position","title":"<code>reset_position()</code>  <code>async</code>","text":"<p>Reset the window position to its starting position.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.reset_size","title":"<code>reset_size()</code>  <code>async</code>","text":"<p>Reset the window size to its starting size.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.reset_window","title":"<code>reset_window()</code>  <code>async</code>","text":"<p>Reset the window to its starting position and size.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.restore","title":"<code>restore()</code>","text":"<p>(Opposite of maximize) Restore the window to its previous size and position.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.toggle_lock","title":"<code>toggle_lock()</code>","text":"<p>Alias for toggle_snap(). Toggle the window snap (lock) state.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.toggle_maximize","title":"<code>toggle_maximize()</code>","text":"<p>Toggle the window between its maximum size and its previous size.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.toggle_snap","title":"<code>toggle_snap()</code>","text":"<p>Toggle the window snap (lock) state.</p>"},{"location":"textual-window/reference/#textual_window.window.Window.toggle_window","title":"<code>toggle_window()</code>","text":"<p>Toggle the window open and closed.</p>"}]}